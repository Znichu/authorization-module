{"version":3,"sources":["components/Forgot/Forgot.module.css","components/Set-New-Pass/SetNewPass.module.css","components/Editor/Editor.module.css","components/Sign-In/SignIn.module.css","components/Register/Register.module.css","components/Preloader/Preloader.module.css","components/Packs/Packs.module.scss","components/Packs/SwitchTable/SwitchTable.module.scss","components/Menu/Menu.tsx","utils/CookieToken/SaveTokenCookie.ts","api/signInApi.ts","redux/profile-reducer.ts","redux/menu-reducer.ts","components/Profile/Profile.tsx","redux/sign-in-reducer.ts","utils/validators/validators.ts","components/Sign-In/SignIn.tsx","api/registerApi.ts","redux/register-reducer.ts","components/Register/Register.tsx","api/forgot-page.ts","redux/forgot-reducer.ts","components/SuccessPage/Success.tsx","components/Forgot/Forgot.tsx","api/resetPasswordApi.ts","redux/set-new-pass-reducer.ts","components/Set-New-Pass/SetNewPass.tsx","redux/app-reducer.ts","components/Preloader/Preloader.tsx","utils/AuthenticationRoute.tsx","api/packsApi.ts","redux/packs-reducer.ts","utils/Modals/AddUpdateCardsPackFormModal/AddUpdateFormModal.tsx","utils/Modals/AddUpdateCardsPackFormModal/AddUpdateForm/AddUpdateForm.tsx","components/Packs/SwitchTable/SwitchTable.tsx","components/Packs/Packs.tsx","components/Editor/Editor.tsx","App.tsx","redux/store.ts","index.tsx","utils/Modals/AddUpdateCardsPackFormModal/AddUpdateForm/AddUpdateForm.module.scss"],"names":["module","exports","HeaderMenu","selectedKey","useSelector","state","menu","mode","selectedKeys","Item","key","to","cookie","Cookie","get","value","set","remove","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","data","token","initialState","profile","_id","name","avatar","publicCardPacksCount","isAdmin","verified","isAuth","actions","type","payload","getAuthData","dispatch","a","saveTokenInCookie","console","log","message","action","Profile","IconFont","createFromIconfontCN","scriptUrl","useDispatch","logoutProfile","useCallback","useEffect","src","undefined","alt","size","style","backgroundColor","icon","UserOutlined","onClick","success","isFetching","errorMessage","signInReducer","schemaSignInForm","yup","shape","required","min","schemaRegisterForm","passwordConfirmation","label","test","this","parent","schemaForgotPage","schemaSetNewPassForm","schemaAddNewCardPackForm","max","path","shots","rating","deckCover","SignIn","useForm","resolver","yupResolver","register","handleSubmit","errors","control","reset","singInReducer","className","signInPage","onSubmit","response","error","signIn","signInPage__form","as","Input","placeholder","showIcon","Password","ref","loading","htmlType","registerAPI","SET_USER_DATA_SUCCESS","addedUser","created","updated","__v","userData","Register","userRegistrationCallback","userRegisteration","registerPage","registerPage__form","forgotPageAPI","html1","html2","Success","status","title","subTitle","Forgot","forgotPage","resetPassword","result","html","match","resetPasswordToken","forgotForm","resetPasswordApi","SetNewPass","restPass","sendNewPass","setNewPassPage","setNewPassPage__info","setNewPassPage__form","initialize","Preloader","example","AuthenticationRoute","Component","exact","rest","render","packsAPI","getPacksQueryParams","cardPack","cardsPack","put","userId","delete","IS_FETCHING","PACKS_TOGGLE","cardPacks","cardPacksTotalCount","page","pageCount","sortPacks","packsToggle","cardPacksData","setPacksThunk","packsGetData","packName","user_id","packsQueryParamsArr","push","resultPacksQueryParams","join","replace","AddUpdateFormModal","memo","props","modalTitle","button","useState","visibleModal","setVisibleModal","modalShowHide","params","visible","onCancel","footer","children","AddUpdateForm","pagination","current","pageSize","cardPackData","actionName","addUpdateCardsPackCallback","newCardPackData","cardPackId","createdCardPackData","addUpdatePackThunk","s","AddPackForm","addonBefore","packParam","defaultValue","errAlert","gradeGroup","Group","grade","onChange","e","target","checked","defaultChecked","private","Create","SwitchTable","checkedChildren","unCheckedChildren","switchPacksHandler","packsToogle","Packs","packs","authUserId","total","position","switchPacks","onChangeTableParams","sorter","extra","sortPacksDefine","length","gradeParam","filter","sorterParam","field","order","deleteCardPack","deletedCardPackData","dataSource","map","index","columns","dataIndex","compare","b","localeCompare","multiple","ghost","record","cardPackColumnParams","danger","disabled","Editor","setValue","wrapper","textEditor","TextArea","autoSize","minRows","maxRows","btnGroup","fileName","link","document","createElement","file","Blob","href","URL","createObjectURL","download","click","revokeObjectURL","saveTextFile","SaveOutlined","CloudUploadOutlined","CloudDownloadOutlined","App","authPromise","Promise","all","initializeApp","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.41b54fbe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPage\":\"Forgot_forgotPage__3U_mg\",\"error\":\"Forgot_error__8meu0\",\"forgotForm\":\"Forgot_forgotForm__2zet8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setNewPassPage\":\"SetNewPass_setNewPassPage__3F8kV\",\"setNewPassPage__info\":\"SetNewPass_setNewPassPage__info__1F1Jc\",\"setNewPassPage__form\":\"SetNewPass_setNewPassPage__form__39uo7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Editor_wrapper__3u-j0\",\"player\":\"Editor_player__1eeAz\",\"textEditor\":\"Editor_textEditor__3XyIp\",\"btnGroup\":\"Editor_btnGroup__16P0L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signInPage\":\"SignIn_signInPage__3JPv-\",\"signInPage__form\":\"SignIn_signInPage__form__18YQt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerPage\":\"Register_registerPage__34YVR\",\"registerPage__form\":\"Register_registerPage__form__3WLvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"example\":\"Preloader_example__2ruyn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardPackColumnParams\":\"Packs_cardPackColumnParams__3PVsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SwitchTable\":\"SwitchTable_SwitchTable__1IuVb\"};","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Menu} from 'antd';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\nexport function HeaderMenu() {\r\n    const selectedKey = useSelector((state: AppStateType ) => state.menu.selectedKey);\r\n\r\n    return (\r\n        <Menu\r\n            mode=\"horizontal\"\r\n            selectedKeys={[selectedKey]}\r\n        >\r\n            <Menu.Item key=\"profile\">\r\n                <NavLink  to='/profile'>Profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"sign-in\">\r\n                <NavLink  to='/sign-in'>Sign-in</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"packs\">\r\n                <NavLink  to='/packs'>Packs</NavLink>\r\n            </Menu.Item>\r\n{/*            <Menu.Item key=\"cards\">\r\n                <NavLink  to='/cards'>Cards</NavLink>\r\n            </Menu.Item>*/}\r\n            <Menu.Item key=\"editor\">\r\n                <NavLink  to='/editor'>Editor</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}","import Cookie from 'universal-cookie'\r\n\r\nconst cookie = new Cookie();\r\n\r\nclass saveTokenInCookie {\r\n\r\n    get (key: string) {\r\n        return cookie.get(key)\r\n    }\r\n\r\n    set (key: string, value: string) {\r\n        cookie.set(key, value)\r\n    }\r\n\r\n    remove(key: string) {\r\n        cookie.remove(key)\r\n    }\r\n}\r\n\r\nexport default new saveTokenInCookie();","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: 'http://localhost:7542/1.0/'*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\ntype ResponseType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: string\r\n    publicCardPacksCount: number\r\n    token: string\r\n    success: boolean\r\n};\r\n\r\nexport const authAPI = {\r\n    signIn(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    getAuth (token: string) {\r\n        return instance.post(`auth/me`, {token})\r\n            .then(res => res.data)\r\n    },\r\n};","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\nimport {authAPI} from \"../api/signInApi\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    profile: {\r\n        _id: null as (string | null),\r\n        email: null as (string | null),\r\n        name: null as (string | null),\r\n        avatar: null as (string | null),\r\n        publicCardPacksCount: null as (number | null),\r\n        isAdmin: null as (boolean | null),\r\n        verified: null as (boolean | null),\r\n    },\r\n    isAuth: false\r\n}\r\n\r\n//Reducer\r\nexport const ProfileReducer = (state: InitialState = initialState, action: ActionsType): InitialState => {\r\n    switch (action.type) {\r\n        case \"USER_PROFILE/SET_PROFILE_DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"USER_PROFILE/SET_AUTH_VALUE\": {\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nexport const actions = {\r\n    setProfileData: (profile: ProfileType, isAuth: boolean) => ({\r\n        type: \"USER_PROFILE/SET_PROFILE_DATA\",\r\n        payload: {\r\n            profile,\r\n            isAuth\r\n        }\r\n    } as const),\r\n    logoutFromProfile: (isAuth: boolean) => ({ type: 'USER_PROFILE/SET_AUTH_VALUE', isAuth } as const)\r\n}\r\n\r\n//Thunk\r\nexport const getAuthData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const token = saveTokenInCookie.get('auth_token');\r\n        let data = await authAPI.getAuth(token)\r\n        saveTokenInCookie.set('auth_token', data.token);\r\n        let {_id, email, isAdmin, name, verified, publicCardPacksCount, avatar} = data;\r\n        dispatch(actions.setProfileData({_id, email, isAdmin, name, verified, publicCardPacksCount, avatar}, true));\r\n    } catch (e) {\r\n        console.log(e.message)\r\n\r\n    }\r\n}\r\n\r\n//Types\r\ntype InitialState = typeof initialState\r\ntype ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionsType>","import {InferActionTypes} from \"./store\";\r\n\r\nlet initialState = {\r\n    selectedKey: ' '\r\n}\r\n//Reducer\r\nexport const MenuReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"CARDS/MENU/SET_SELECTED_KEY\": {\r\n            return {\r\n                ...state,\r\n                selectedKey: action.key\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Action\r\nexport const action = {\r\n    setSelectedKey: (key: string) => ({type: 'CARDS/MENU/SET_SELECTED_KEY', key})\r\n}\r\n//Type\r\ntype ActionType = InferActionTypes<typeof action>\r\ntype InitialStateType = typeof initialState","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Avatar, Button} from \"antd\";\r\nimport {createFromIconfontCN} from '@ant-design/icons';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {actions} from \"../../redux/profile-reducer\";\r\nimport saveTokenInCookie from \"../../utils/CookieToken/SaveTokenCookie\"\r\nimport {action} from \"../../redux/menu-reducer\";\r\n\r\nexport const Profile = () => {\r\n\r\n    const IconFont = createFromIconfontCN({\r\n        scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js',\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutProfile = useCallback(\r\n        () =>\r\n            dispatch(actions.logoutFromProfile(false)),\r\n        [dispatch]\r\n    )\r\n    const logout = () => {\r\n        logoutProfile();\r\n        saveTokenInCookie.remove('auth_token');\r\n    }\r\n\r\n    useEffect(() => { dispatch(action.setSelectedKey('profile')) }, [dispatch])\r\n\r\n    const {email, name, verified, publicCardPacksCount, avatar} = useSelector((state: AppStateType) => state.profile.profile);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Profile</h3>\r\n            </div>\r\n            <div>\r\n                {avatar\r\n                    ? <img src={avatar || undefined} alt=\"profile avatar\"/>\r\n                    : <Avatar size={64} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <h4>Name</h4>\r\n                    <span>{name}</span>\r\n                </div>\r\n                <div>\r\n                    <h4>Card Pack</h4>\r\n                    <span>{publicCardPacksCount}</span>\r\n                </div>\r\n                <div>\r\n                    <h4>Email</h4>\r\n                    <span>{email}</span>\r\n                </div>\r\n            </div>\r\n            <Button onClick={() => logout()} type=\"primary\" icon={<IconFont type=\"icon-tuichu\"/>}>\r\n                Logout\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import {authAPI} from '../api/signInApi';\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\nimport {getAuthData} from \"./profile-reducer\";\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, ActionType>\r\ntype ActionType = InferActionTypes<typeof actions>\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    _id: null as (null | string),\r\n    email: null as (null | string),\r\n    success: false,\r\n    isFetching: false,\r\n    errorMessage: ''\r\n};\r\n\r\n\r\n//reducer\r\nconst signInReducer = (state: initialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"SIGNIN/SET_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"SIGNIN/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SIGNIN/SET_MESSAGE_ERROR\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n//action\r\nexport const actions = {\r\n    setAuthUserDataSuccess: (_id: string, email: string, success: boolean) => ({type: \"SIGNIN/SET_USER_DATA\", payload: {_id, email, success}} as const),\r\n    setAuthUserDataError: ( errorMessage: string) => ({type: \"SIGNIN/SET_MESSAGE_ERROR\", errorMessage} as const ),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"SIGNIN/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//thunk to login\r\nexport const signIn = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setAuthUserDataError(\"\"));\r\n        let data = await authAPI.signIn(email, password, rememberMe);\r\n        saveTokenInCookie.set('auth_token', data.token);\r\n        dispatch(actions.setAuthUserDataSuccess(data._id, data.email, data.success));\r\n        dispatch(getAuthData());\r\n    } catch (e) {\r\n        dispatch(actions.setAuthUserDataError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(actions.toggleIsFetching(false));\r\n};\r\n\r\nexport default signInReducer;\r\n\r\n","import * as yup from \"yup\";\r\n\r\nexport const schemaSignInForm = yup.object().shape({\r\n    email: yup.string().required().min(2),\r\n    password: yup.string().required().min(8),\r\n});\r\n\r\nexport const schemaRegisterForm = yup.object().shape({\r\n    email: yup.string().email().required().min(7),\r\n    password: yup.string().required().min(8),\r\n    passwordConfirmation: yup.string().required().label('Confirm password')\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});\r\n\r\nexport const schemaForgotPage = yup.object().shape({\r\n    email: yup.string().email().required(),\r\n});\r\n\r\nexport const schemaSetNewPassForm = yup.object().shape({\r\n    password: yup.string().required().min(8),\r\n    passwordConfirmation: yup.string().required()\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});\r\n\r\nexport const schemaAddNewCardPackForm = yup.object().shape({\r\n    name: yup.string().max(50, `Require less or 50 letters`),\r\n    path:  yup.string(),\r\n    shots:  yup.number().min(0, `Require more or equal 0`),\r\n    rating:  yup.number().min(0,  `Require more or equal 0`),\r\n    deckCover:  yup.string(),\r\n    type:  yup.string(),\r\n});","import React, {useEffect} from 'react';\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {Alert, Button, Input} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../../redux/sign-in-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport style from './SignIn.module.css'\r\nimport {schemaSignInForm} from \"../../utils/validators/validators\";\r\nimport {action} from \"../../redux/menu-reducer\";\r\n\r\n//react-hook-form\r\ntype  LoginData = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean\r\n}\r\n\r\n//using hook\r\nexport const SignIn = () => {\r\n    const dispatch = useDispatch();\r\n    const {register, handleSubmit, errors, control, reset} = useForm<LoginData>({\r\n        resolver: yupResolver(schemaSignInForm)\r\n    });\r\n\r\n//dispatch thunk\r\n    const onSubmit = (data: LoginData) => {\r\n        let {email, password, rememberMe} = data;\r\n        dispatch(signIn(email, password, rememberMe));\r\n    };\r\n\r\n    //checking logged user or not\r\n    const isAuth = useSelector((state: AppStateType) => state.profile.isAuth);\r\n    const {isFetching, errorMessage} = useSelector((state: AppStateType) => state.singInReducer);\r\n\r\n    useEffect(() => { dispatch(action.setSelectedKey('sign-in')) }, [dispatch])\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={`/profile`}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.signInPage}>\r\n\r\n            <div>\r\n                <h3>SignIn</h3>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.signInPage__form}>\r\n                <div>\r\n                    <Controller\r\n                        as={Input}\r\n                        name=\"email\"\r\n                        control={control}\r\n                        placeholder=\"Email\"\r\n                    />\r\n                    {errors.email && <Alert message=\"Login is required\" type=\"error\" showIcon/>}\r\n                </div>\r\n                <div>\r\n                    <Controller\r\n                        as={Input.Password}\r\n                        name=\"password\"\r\n                        control={control}\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    {errors.password && <Alert message=\"Password is required\" type=\"error\" showIcon/>}\r\n                </div>\r\n\r\n                <Link to='/forgot'>Forgot your password?</Link>\r\n                <div>\r\n                    <input type='checkbox' name='rememberMe' ref={register}/>\r\n                    {` Remember me`}\r\n                </div>\r\n                <Button onClick={ () => reset() } loading={isFetching} htmlType='submit' type='primary'>Sign In</Button>\r\n            </form>\r\n            <span>or</span>\r\n            <Link to='/register'>Registration</Link>\r\n        </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\ntype addedUserResponseType = {\r\n    created: string,\r\n    email: string,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    updated: string,\r\n    verified: boolean,\r\n    __v: number,\r\n    _id: string,\r\n}\r\n\r\ntype ResponseType = {\r\n    addedUser: addedUserResponseType,\r\n    success: boolean\r\n}\r\n\r\nexport const registerAPI = {\r\n    register: (email: string, password: string) => instance.post<ResponseType>(`auth/register`, {email: email, password: password})\r\n        .then(res => res.data)\r\n};","import {registerAPI} from \"../api/registerApi\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER_DATA_SUCCESS = 'authorization-module-project/registerReducer/SET_USER_DATA_SUCCESS';\r\n\r\ntype addedUser = {\r\n    created: string | null,\r\n    email: string | null,\r\n    isAdmin: boolean,\r\n    name: string | null,\r\n    publicCardPacksCount: number | null,\r\n    rememberMe: boolean,\r\n    updated: string | null,\r\n    verified: boolean,\r\n    __v: number | null,\r\n    _id: string | null,\r\n}\r\n\r\ntype initialState = {\r\n    addedUser: addedUser,\r\n    success: boolean\r\n};\r\n\r\nconst initialState: initialState = {\r\n    addedUser: {\r\n        created: null,\r\n        email: null,\r\n        isAdmin: false,\r\n        name: null,\r\n        publicCardPacksCount: null,\r\n        rememberMe: false,\r\n        updated: null,\r\n        verified: false,\r\n        __v: null,\r\n        _id: null,\r\n    },\r\n    success: false\r\n};\r\n\r\nexport const registerReducer = (state: initialState = initialState, action: registerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addedUser: {...action.payload.addedUser},\r\n                success: action.payload.success\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Actions\r\ntype InferRegisterActionTypes<T> = T extends {[key: string]: infer U} ? U : never;\r\ntype registerActionTypes = ReturnType<InferRegisterActionTypes<typeof actions>>\r\n\r\nconst actions = {\r\n    registerUserDataSuccess : (userData: initialState) => ({type: SET_USER_DATA_SUCCESS, payload: {...userData}} as const),\r\n}\r\n\r\n//Thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, registerActionTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, {}, registerActionTypes>\r\n\r\nexport const userRegisteration = (email: string, password: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const data = await registerAPI.register(email, password);\r\n        dispatch(actions.registerUserDataSuccess(data))\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {userRegisteration} from \"../../redux/register-reducer\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {useCallback} from \"react\";\r\nimport {Button, Input} from \"antd\";\r\nimport style from './Register.module.css'\r\nimport {schemaRegisterForm} from \"../../utils/validators/validators\";\r\n\r\ntype IFormInputs = {\r\n    email: string,\r\n    password: string,\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const Register = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.register.success);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<IFormInputs>({\r\n        resolver: yupResolver(schemaRegisterForm)\r\n    });\r\n\r\n    const userRegistrationCallback = useCallback((email: string, password: string) =>\r\n            dispatch(userRegisteration(email, password)),\r\n        [dispatch]\r\n    );\r\n\r\n    const onSubmit = (data: IFormInputs) => {\r\n        userRegistrationCallback(data.email, data.password);\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/sign-in\"/>\r\n    }\r\n    return (\r\n        <div className={style.registerPage}>\r\n            <div>\r\n                <h3>Registration</h3>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.registerPage__form}>\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n                <p>{errors.email?.message}</p>\r\n                <Controller\r\n                    as={Input.Password}\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Password\"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n\r\n                <Controller\r\n                    as={Input.Password}\r\n                    type='password'\r\n                    name=\"passwordConfirmation\"\r\n                    control={control}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n                <p>{errors.passwordConfirmation?.message}</p>\r\n                <Button onClick={ () => reset() } htmlType='submit' type=\"primary\">Register</Button>\r\n            </form>\r\n            <Link to='/sign-in'>Sign In</Link>\r\n        </div>\r\n    );\r\n};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\n\r\nexport const forgotPageAPI = {\r\n    forgot (email: string, html1 = \"<a href='http://localhost:3000/authorization-module#/set-new-password'\", html2 = \">reset-password-link</a>\") {\r\n        return instance.post(\"/auth/forgot\", {email, html1, html2})\r\n            .then(response => response.data)\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {forgotPageAPI} from \"../api/forgot-page\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\n\r\n//State\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    isFetching: false,\r\n}\r\n\r\n//Reducer\r\nexport const forgotReducer = (state: InitialState = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                success: action.success,\r\n            }\r\n        }\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_ERROR': {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        case \"FORGOTPAGE/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nconst action = {\r\n    setChangePasswordSuccess: (success: boolean) => ({\r\n        type: 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS',\r\n        success\r\n    } as const ),\r\n    setChangePasswordError: (errorMessage: string) => ({\r\n        type: 'FORGOTPAGE/CHANGE_PASSWORD_ERROR',\r\n        errorMessage\r\n    } as const ),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"FORGOTPAGE/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//Thunk\r\nexport const changePassword = (email: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(action.toggleIsFetching(true));\r\n        dispatch(action.setChangePasswordError(\"\"));\r\n        let data = await forgotPageAPI.forgot(email);\r\n        let result = data.html.match(/(.*)set-new-password'(.*?)>(.*)/);\r\n        const resetPasswordToken = result[2];\r\n        saveTokenInCookie.set('resetPasswordToken', resetPasswordToken);\r\n        dispatch(action.setChangePasswordSuccess(data.success))\r\n    } catch (e) {\r\n        dispatch(action.setChangePasswordError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(action.toggleIsFetching(false))\r\n}\r\n\r\n//Types\r\ntype ActionTypes = InferActionTypes <typeof action>\r\ntype InitialState = typeof initialState\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionTypes>\r\n","import React from \"react\";\r\nimport {Result} from \"antd\";\r\n\r\n\r\nexport function Success() {\r\n    return (\r\n        <Result\r\n            status=\"success\"\r\n            title= 'Check your email'\r\n            subTitle=\"We've sent an email to ... . Click the link in the email to reset your password\r\n            If you don't see the email, check other places it might be, like your junk, social, spam, or other folders.\"\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {Button, Input, Alert} from 'antd';\r\nimport style from './Forgot.module.css'\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {changePassword} from \"../../redux/forgot-reducer\";\r\nimport {schemaForgotPage} from '../../utils/validators/validators';\r\nimport {Success} from '../SuccessPage/Success';\r\n\r\ntype InputEmailType = {\r\n    email: string\r\n}\r\n\r\nexport const Forgot: React.FC = () => {\r\n    const {handleSubmit, errors, control, reset} = useForm<InputEmailType>({resolver: yupResolver(schemaForgotPage)});\r\n    const onSubmit = (data: InputEmailType) => {\r\n        resetPassword(data.email);\r\n    };\r\n\r\n    const {errorMessage, isFetching, success} = useSelector((state: AppStateType) => state.forgotPage);\r\n    const dispatch = useDispatch();\r\n    const resetPassword = useCallback((data) => dispatch(changePassword(data)), [dispatch])\r\n    console.log(\"Render Forgot\");\r\n\r\n    if (success) {\r\n        return <Success />\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgotPage}>\r\n            {errorMessage &&\r\n            <Alert message={errorMessage} type=\"warning\" showIcon/>\r\n            }\r\n            <h3>Forgot password?</h3>\r\n            <span>Please enter <b>email</b> that you used to sign in</span>\r\n            <form className={style.forgotForm} onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={style.error}>\r\n                    {errors.email\r\n                        ? <Alert message={errors.email?.message} type=\"error\" showIcon/>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n                <Button onClick={() => reset()} loading={isFetching} htmlType=\"submit\" type='primary'>Send email</Button>\r\n            </form>\r\n            <Link to={'/sign-in'}>Sign In</Link>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\nexport const resetPasswordApi = {\r\n    resetPassword (resetPasswordToken: string, password: string) {\r\n        return instance.post('/auth/set-new-password', {resetPasswordToken, password})\r\n            .then(res=> res.data)\r\n    }\r\n}","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {resetPasswordApi} from \"../api/resetPasswordApi\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\n\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    isFetching: false\r\n}\r\n\r\n//Reducer\r\nexport const SetNewPassReducer = (state: InitialState = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"RESET/SET_NEW_PASS_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                success: action.success\r\n            }\r\n        }\r\n        case \"RESET/SET_NEW_PASS_ERROR\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.message\r\n            }\r\n        }\r\n        case \"RESET/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nconst actions = {\r\n    setNewPassSuccess: (success: boolean) => ({type: \"RESET/SET_NEW_PASS_SUCCESS\", success} as const),\r\n    setNewPassError: (message: string) => ({type: \"RESET/SET_NEW_PASS_ERROR\", message} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"RESET/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//Thunk\r\nexport const resetPassword = (password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        const resetPasswordToken = saveTokenInCookie.get('resetPasswordToken');\r\n        let data = await resetPasswordApi.resetPassword(resetPasswordToken, password);\r\n        dispatch(actions.setNewPassSuccess(data))\r\n    } catch (e) {\r\n        dispatch(actions.setNewPassError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(actions.toggleIsFetching(false))\r\n}\r\n\r\n\r\n//Types\r\ntype InitialState = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>","import React, {useCallback} from 'react';\r\nimport style from \"./SetNewPass.module.css\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {Button, Input} from \"antd\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {schemaSetNewPassForm} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {resetPassword} from \"../../redux/set-new-pass-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype SetNewPassType = {\r\n    password: string\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const SetNewPass = () => {\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<SetNewPassType>({\r\n        resolver: yupResolver(schemaSetNewPassForm)\r\n    });\r\n    const onSubmit = (data: SetNewPassType) => {\r\n        sendNewPass(data.password);\r\n    };\r\n    const {success, isFetching} = useSelector((state: AppStateType) => state.restPass);\r\n\r\n    const dispatch = useDispatch();\r\n    const sendNewPass = useCallback(\r\n        (data) => dispatch(resetPassword(data)),\r\n        [dispatch]\r\n    )\r\n\r\n    if (success) {\r\n        return <Redirect to='/sign-in'/>\r\n    }\r\n    return (\r\n        <div className={style.setNewPassPage}>\r\n            <div className={style.setNewPassPage__info}>\r\n                <h3>Choose a New Password</h3>\r\n                <span>Create a new password that is at least 8 characters long</span>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.setNewPassPage__form}>\r\n                <Controller\r\n                    as={Input.Password}\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Password\"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n\r\n                <Controller\r\n                    as={Input.Password}\r\n                    type='password'\r\n                    name=\"passwordConfirmation\"\r\n                    control={control}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n                <p>{errors.passwordConfirmation?.message}</p>\r\n                <Button onClick={ () => reset() } loading={isFetching} htmlType='submit' type=\"primary\">Continue</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {getAuthData} from \"./profile-reducer\";\r\n\r\nlet initialState  =  {\r\n    initialize: false\r\n}\r\n\r\n//Reducer\r\nexport const InitializeApp = (state: InitialState = initialState, action: ActionTypes ) => {\r\n    switch (action.type) {\r\n        case \"APP/SET_INITIALIZE_APP\": {\r\n            return {\r\n                ...state,\r\n                initialize: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nconst action = {\r\n    setInitializeApp: () => ({type: 'APP/SET_INITIALIZE_APP'} as const )\r\n}\r\n\r\n//Thunk\r\n\r\nexport const getInitializeApp = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        let authPromise =  await dispatch(getAuthData());\r\n        Promise.all([authPromise])\r\n            .then(\r\n                () => dispatch(action.setInitializeApp())\r\n            )\r\n    } catch (e) {\r\n        console.log(e.message)\r\n    }\r\n}\r\n\r\n//Type\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionTypes>\r\ntype InitialState = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof action>","import React from \"react\";\r\nimport {Spin} from \"antd\";\r\nimport style from \"./Preloader.module.css\"\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={style.example}>\r\n            <Spin />\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\n\r\ntype Props = {\r\n    path: string\r\n    Component: React.FC\r\n    exact?: boolean\r\n}\r\n\r\nconst AuthenticationRoute: React.FC<Props> = ({Component, path, exact, ...rest}) => {\r\n    const isAuth = useSelector((state: AppStateType) => state.profile.isAuth);\r\n    return (\r\n        <Route\r\n            path={path}\r\n            exact={exact}\r\n            render={() =>\r\n                isAuth ? <Component { ...rest } /> : <Redirect to={'/sign-in'}/>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default AuthenticationRoute","import axios from \"axios\";\r\nimport { cardPackType } from \"../utils/Types/PacksTypes/PacksTypes\";\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\nexport const packsAPI = {\r\n    getCardPacks: (getPacksQueryParams: string) => {\r\n        return instance.get<getCardPacksResponseType>(`cards/pack${getPacksQueryParams}`)\r\n            .then(res => res.data)\r\n    },\r\n    addCardPack: (cardPack: any, token: string) => {\r\n        return instance.post<CardPackResponseType>(`cards/pack`, {cardsPack: {...cardPack}, token: token})\r\n            .then(res => res.data)\r\n    },\r\n    updateCardPack: (cardPack: any, token: string) => {\r\n        return instance.put<CardPackResponseType>(`cards/pack`, {cardsPack: {...cardPack}, token: token})\r\n            .then(res => res.data)\r\n    },\r\n    deleteCardPack: (userId: string, token: string) => {\r\n        return instance.delete<CardPackResponseType>(`cards/pack?id=${userId}&token=${token}`)\r\n            .then(res => res.data)\r\n    },\r\n};\r\n\r\n\r\n//Response Types\r\ntype getCardPacksResponseType = {\r\n    cardPacks: Array<cardPackType>;\r\n    cardPacksTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n};\r\n\r\ntype CardPackResponseType = {\r\n    newCardsPack: Array<cardPackType>;\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n};\r\n\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {packsAPI} from \"../api/packsApi\";\r\nimport saveTokenInCookie from '../utils/CookieToken/SaveTokenCookie'\r\nimport {cardPackType, cardPacksDataType, packsGetDataType, addCardPackType} from \"../utils/Types/PacksTypes/PacksTypes\";\r\n\r\nconst SET_CARD_PACKS = 'packsReducer/SET_CARD_PACKS';\r\nconst IS_FETCHING = 'packsReducer/IS_FETCHING';\r\nconst PACKS_TOGGLE = 'packsReducer/PACKS_TOGGLE';\r\nconst SET_CARD_PACKS_ERROR = 'packsReducer/SET_CARD_PACKS_ERROR';\r\n\r\nconst initialState = {\r\n    cardPacks: [] as (Array<cardPackType>),\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortPacks: 1,\r\n    isFetching: false,\r\n    packsToggle: false,\r\n    errorMessage: \"\",\r\n};\r\n\r\n//Reducers\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case SET_CARD_PACKS: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                cardPacks: [...action.payload.cardPacks]\r\n            }\r\n        }\r\n        case SET_CARD_PACKS_ERROR: {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        case IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case PACKS_TOGGLE: {\r\n            return {\r\n                ...state,\r\n                packsToggle: action.packsToggle\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Actions\r\nexport const actions = {\r\n    setCardPacksSuccess: (cardPacksData: cardPacksDataType) => ({\r\n        type: SET_CARD_PACKS,\r\n        payload: {...cardPacksData}\r\n    } as const),\r\n    setCardPacksSuccessError: (errorMessage: string) => ({\r\n        type: SET_CARD_PACKS_ERROR,\r\n        errorMessage\r\n    } as const),\r\n    packsToggleSuccess: (packsToggle: boolean) => ({\r\n        type: PACKS_TOGGLE,\r\n        packsToggle\r\n    } as const),\r\n    isFetchingSuccess: (isFetching: boolean) => ({\r\n        type: IS_FETCHING,\r\n        isFetching\r\n    } as const),\r\n}\r\n\r\n//Thunks\r\nexport const setPacksThunk = (packsGetData: packsGetDataType): ThunkType => async (dispatch) => {\r\n\r\n    const {\r\n        packName = null,\r\n        min = null,\r\n        max = null,\r\n        sortPacks = 1,\r\n        page = 1,\r\n        pageCount = 10,\r\n        user_id = null\r\n    } = packsGetData;\r\n\r\n    const token = await saveTokenInCookie.get('auth_token');\r\n\r\n    const packsQueryParamsArr = ['?'];\r\n    packName && packsQueryParamsArr.push(`packName=${packName}`);\r\n    min && packsQueryParamsArr.push(`min=${min}`);\r\n    max && packsQueryParamsArr.push(`max=${max}`);\r\n    (sortPacks === 1 || sortPacks === 0) && packsQueryParamsArr.push(`sortPacks=${sortPacks}grade`);\r\n    page && packsQueryParamsArr.push(`page=${page}`);\r\n    pageCount && packsQueryParamsArr.push(`pageCount=${pageCount}`);\r\n    token && packsQueryParamsArr.push(`token=${token}`);\r\n    user_id && packsQueryParamsArr.push(`user_id=${user_id}`);\r\n    const resultPacksQueryParams = packsQueryParamsArr.join('&').replace(/\\?&/, '?');\r\n\r\n    await dispatch(actions.isFetchingSuccess(true));\r\n    try {\r\n        const cardPacksData = await packsAPI.getCardPacks(resultPacksQueryParams);\r\n        const {cardPacks, cardPacksTotalCount, page, pageCount, token} = cardPacksData;\r\n        await saveTokenInCookie.set('auth_token', token);\r\n        await dispatch(actions.setCardPacksSuccess({cardPacks, cardPacksTotalCount, page, pageCount, sortPacks}));\r\n        await dispatch(actions.setCardPacksSuccessError(''));\r\n    } catch (e) {\r\n        console.log(e.response);\r\n        await dispatch(actions.setCardPacksSuccessError(e.response.data.error));\r\n    }\r\n    await dispatch(actions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const addUpdatePackThunk = (packsGetData: packsGetDataType,\r\n                                   newCardPackData: addCardPackType,\r\n                                   cardPackId: string | null,\r\n                                   actionName: string): ThunkType => async (dispatch) => {\r\n\r\n    const token = await saveTokenInCookie.get('auth_token');\r\n    await dispatch(actions.isFetchingSuccess(true));\r\n    try {\r\n        if (actionName === 'Create') {\r\n            const createdCardPackData = await packsAPI.addCardPack(newCardPackData, token);\r\n            await saveTokenInCookie.set('auth_token', createdCardPackData.token);\r\n        } else if (actionName === 'Update') {\r\n            const createdCardPackData = await packsAPI.updateCardPack({_id: cardPackId, ...newCardPackData}, token);\r\n            await saveTokenInCookie.set('auth_token', createdCardPackData.token);\r\n        } else {\r\n            console.log('addUpdatePackThunk Error!');\r\n        }\r\n        await dispatch(setPacksThunk(packsGetData));\r\n    } catch (e) {\r\n        console.log(e.response);\r\n    }\r\n    await dispatch(actions.isFetchingSuccess(false));\r\n}\r\n\r\nexport const deleteCardPackThunk = (packsGetData: packsGetDataType, userId: string): ThunkType => async (dispatch) => {\r\n\r\n    const token = await saveTokenInCookie.get('auth_token');\r\n    await dispatch(actions.isFetchingSuccess(true));\r\n    try {\r\n        const deletedCardPackData = await packsAPI.deleteCardPack(userId, token);\r\n        await saveTokenInCookie.set('auth_token', deletedCardPackData.token);\r\n        await dispatch(setPacksThunk(packsGetData));\r\n    } catch (e) {\r\n        console.log(e.response);\r\n    }\r\n    await dispatch(actions.isFetchingSuccess(false));\r\n}\r\n\r\n//Types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>","import * as React from 'react';\r\nimport {Button, Modal} from \"antd\";\r\nimport {memo, ReactElement, useState} from \"react\";\r\n\r\nexport const AddUpdateFormModal = memo((props: any): ReactElement => {\r\n\r\n    const {modalTitle, button} = props;\r\n\r\n    const [visibleModal, setVisibleModal] = useState(false);\r\n    const modalShowHide = () => setVisibleModal(!visibleModal);\r\n\r\n    return (\r\n        <>\r\n            <Button {...button.params} onClick={modalShowHide}>{button.name}</Button>\r\n            <Modal visible={visibleModal}\r\n                   title={modalTitle}\r\n                   onCancel={modalShowHide}\r\n                   footer={false}\r\n            >\r\n                {props.children}\r\n            </Modal>\r\n        </>\r\n    )\r\n});","import * as React from 'react';\r\nimport {memo, ReactElement, useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {Alert, Button, Checkbox, Input, Radio} from \"antd\";\r\nimport s from './AddUpdateForm.module.scss'\r\nimport {addUpdatePackThunk} from \"../../../../redux/packs-reducer\";\r\nimport {schemaAddNewCardPackForm} from \"../../../validators/validators\";\r\nimport {addCardPackType, cardPackType} from \"../../../Types/PacksTypes/PacksTypes\";\r\nimport {TablePaginationConfig} from \"antd/lib/table/interface\";\r\n\r\nexport const AddUpdateForm = memo((props: propsType): ReactElement => {\r\n\r\n    let {\r\n        sortPacks,\r\n        pagination: {current: page, pageSize: pageCount},\r\n        cardPackData,\r\n        actionName,\r\n        user_id\r\n    } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addUpdateCardsPackCallback = useCallback((newCardPackData) => {\r\n        const cardPackId = cardPackData ? cardPackData._id : null;\r\n        dispatch(addUpdatePackThunk({\r\n            page,\r\n            pageCount,\r\n            sortPacks,\r\n            user_id\r\n        }, newCardPackData, cardPackId, actionName));\r\n    }, [dispatch, page, pageCount, sortPacks, user_id]);\r\n\r\n    const {handleSubmit, errors, control} = useForm({\r\n        resolver: yupResolver(schemaAddNewCardPackForm)\r\n    });\r\n\r\n    const onSubmit = (data: addCardPackType) => {\r\n        addUpdateCardsPackCallback(data);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={s.AddPackForm}>\r\n\r\n                <Controller as={<Input addonBefore=\"Name:\" className={s.packParam}/>}\r\n                            name=\"name\"\r\n                            control={control}\r\n                            placeholder=\"default = no Name\"\r\n                            defaultValue={cardPackData && cardPackData.name}\r\n                />\r\n                {errors.name && <Alert type={\"warning\"}\r\n                                       message={errors.name.message}\r\n                                       className={s.errAlert}/>}\r\n\r\n                <Controller as={<Input addonBefore=\"Path:\" className={s.packParam}/>}\r\n                            name=\"path\"\r\n                            control={control}\r\n                            placeholder=\"default = /def\"\r\n                            defaultValue={cardPackData && cardPackData.path}/>\r\n                {errors.path && <Alert type={\"warning\"}\r\n                                       message={errors.path.message}\r\n                                       className={s.errAlert}/>}\r\n\r\n                <Controller name=\"grade\"\r\n                            control={control}\r\n                            render={(props:gradeRenderType) => (\r\n                                <div className={`${s.gradeGroup} ${s.packParam}`}>\r\n                                    <div>Grade:</div>\r\n                                    <Radio.Group name=\"gradeGroup\"\r\n                                                 defaultValue={cardPackData ? cardPackData.grade : 0}\r\n                                                 onChange={e => props.onChange(e.target.value)}>\r\n                                        <Radio value={0}>0</Radio>\r\n                                        <Radio value={1}>1</Radio>\r\n                                        <Radio value={2}>2</Radio>\r\n                                        <Radio value={3}>3</Radio>\r\n                                        <Radio value={4}>4</Radio>\r\n                                        <Radio value={5}>5</Radio>\r\n                                    </Radio.Group>\r\n                                </div>\r\n                            )}/>\r\n                {errors.grade && <Alert type={\"warning\"}\r\n                                        message={errors.grade.message}\r\n                                        className={s.errAlert}/>}\r\n\r\n                <Controller as={<Input addonBefore=\"Shots:\" className={s.packParam}/>}\r\n                            name=\"shots\"\r\n                            control={control}\r\n                            placeholder=\"default = 0\"\r\n                            defaultValue={cardPackData && cardPackData.shots}/>\r\n                {errors.shots && <Alert type={\"warning\"}\r\n                                        message={errors.shots.message}\r\n                                        className={s.errAlert}/>}\r\n\r\n                <Controller as={<Input addonBefore=\"DeckCover:\" className={s.packParam}/>}\r\n                            name=\"deckCover\"\r\n                            control={control}\r\n                            placeholder=\"default = url or base64\"\r\n                />\r\n                {errors.deckCover && <Alert type={\"warning\"}\r\n                                            message={errors.deckCover.message}\r\n                                            className={s.errAlert}/>}\r\n\r\n                <Controller name=\"private\"\r\n                            control={control}\r\n                            render={(props) => <Checkbox onChange={e => props.onChange(e.target.checked)}\r\n                                                         defaultChecked={cardPackData && cardPackData.private}\r\n                                                         className={s.packParam}>Private</Checkbox>}/>\r\n\r\n                <Controller as={<Input addonBefore=\"Type:\" className={s.packParam}/>}\r\n                            name=\"type\"\r\n                            control={control}\r\n                            placeholder=\"default = pack\"\r\n                            defaultValue={cardPackData && cardPackData.type}/>\r\n                {errors.type && <Alert type={\"warning\"}\r\n                                       message={errors.type.message}\r\n                                       className={s.errAlert}/>}\r\n\r\n                <Button htmlType='submit' type=\"primary\" className={s.Create}>{actionName}</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n//Types\r\ntype propsType = {\r\n    sortPacks: number,\r\n    pagination: TablePaginationConfig,\r\n    cardPackData?: cardPackType,\r\n    actionName: string,\r\n    user_id: string\r\n};\r\ntype gradeRenderType = { onChange: (...event: any[]) => void; onBlur: () => void; value: any; };","import React, {memo, ReactElement} from 'react'\r\nimport {Switch} from \"antd\";\r\nimport s from './SwitchTable.module.scss'\r\n\r\nexport const SwitchTable = memo((props: any): ReactElement => {\r\n\r\n    return(\r\n        <div className={s.SwitchTable}>\r\n            <Switch checkedChildren=\"My Packs\"\r\n                    unCheckedChildren=\"All Packs\"\r\n                    onClick={props.switchPacksHandler}\r\n                    checked={props.packsToogle}/>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n","import React from 'react';\r\nimport {setPacksThunk, deleteCardPackThunk, actions} from '../../redux/packs-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {memo, ReactElement, ReactText, useCallback, useEffect} from 'react';\r\nimport {Button, Space, Table} from 'antd';\r\nimport s from './Packs.module.scss'\r\nimport {Link} from 'react-router-dom';\r\nimport {cardPackType, recordType} from '../../utils/Types/PacksTypes/PacksTypes';\r\nimport {AddUpdateFormModal} from '../../utils/Modals/AddUpdateCardsPackFormModal/AddUpdateFormModal';\r\nimport {AddUpdateForm} from '../../utils/Modals/AddUpdateCardsPackFormModal/AddUpdateForm/AddUpdateForm';\r\nimport {SwitchTable} from './SwitchTable/SwitchTable';\r\nimport {TablePaginationConfig, ColumnsType} from 'antd/lib/table/interface';\r\nimport {action} from \"../../redux/menu-reducer\";\r\n\r\nexport const Packs: React.FC = memo((): ReactElement => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(action.setSelectedKey('packs'));\r\n    }, [])\r\n\r\n    const {\r\n        packs: {\r\n            cardPacks,\r\n            cardPacksTotalCount,\r\n            page,\r\n            pageCount,\r\n            sortPacks,\r\n            isFetching,\r\n            packsToggle\r\n        },\r\n        profile: {profile: {_id: authUserId}}\r\n    } = useSelector((state: AppStateType) => state);\r\n\r\n    const user_id = packsToggle && authUserId ? authUserId : '';\r\n\r\n    const pagination: TablePaginationConfig = {\r\n        current: page,\r\n        pageSize: pageCount,\r\n        total: cardPacksTotalCount,\r\n        position: ['bottomCenter']\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(setPacksThunk({}));\r\n    }, []);\r\n\r\n    const switchPacks = useCallback((user_id: string | null, packsToggle: boolean) => {\r\n        dispatch(setPacksThunk({page, pageCount, sortPacks, user_id}));\r\n        dispatch(actions.packsToggleSuccess(packsToggle));\r\n    }, [dispatch, packsToggle]);\r\n\r\n    const switchPacksHandler = useCallback(() => {\r\n        packsToggle ? switchPacks('', false) : switchPacks(authUserId, true);\r\n    }, [packsToggle]);\r\n\r\n    const onChangeTableParams = useCallback((pagination: TablePaginationConfig,\r\n                                             sorter: sorterType,\r\n                                             extra: any) => {\r\n        //We get object or array. We should found value of grade filter and return 0 or 1\r\n        const sortPacksDefine = () => {\r\n            if (extra.length >= 2) {\r\n                const gradeParam = extra.filter((sorterParam: { field: string }) => sorterParam.field === 'grade');\r\n                return gradeParam[0].order = gradeParam;\r\n            } else {\r\n                return extra.field === 'grade' ? extra.order : null;\r\n            }\r\n        };\r\n        const sortPacks = sortPacksDefine() ? (sortPacksDefine() === 'ascend' ? 1 : 0) : 1;\r\n        const {current: page, pageSize: pageCount} = pagination;\r\n        dispatch(setPacksThunk({page, pageCount, sortPacks, user_id}));\r\n    }, [dispatch, packsToggle]);\r\n\r\n\r\n    const deleteCardPack = useCallback((pagination, sortPacks, cardPackId) => {\r\n        const {current: page, pageSize: pageCount} = pagination;\r\n        dispatch(deleteCardPackThunk({page, pageCount, sortPacks, user_id}, cardPackId));\r\n    }, [dispatch, packsToggle]);\r\n\r\n\r\n    const dataSource = cardPacks.map((cardPack: cardPackType, index: number) => ({\r\n        key: `${cardPack._id}_${index}`,\r\n        name: cardPack.name,\r\n        grade: cardPack.grade,\r\n        userId: cardPack.user_id,\r\n        cardPackId: cardPack._id\r\n    }));\r\n\r\n    const columns: columnsType = [\r\n        {\r\n            key: 'name',\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            sorter: {\r\n                compare: (a: any, b: any) => a.name.localeCompare(b.name),\r\n                multiple: 1\r\n            },\r\n        },\r\n        {\r\n            key: 'grade',\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n            sorter: {\r\n                compare: (a: any, b: any) => a.grade - b.grade,\r\n                multiple: 2\r\n            },\r\n        },\r\n        {\r\n            key: 'add',\r\n            title:\r\n                <AddUpdateFormModal modalTitle='Create a new cards pack'\r\n                                    button={{\r\n                                        name: 'Add',\r\n                                        params: {type: 'primary', ghost: true}\r\n                                    }}>\r\n                    <AddUpdateForm sortPacks={sortPacks}\r\n                                   pagination={pagination}\r\n                                   user_id={user_id}\r\n                                   actionName='Create'/>\r\n                </AddUpdateFormModal>,\r\n            render: (record: recordType) => (\r\n                <Space size='middle' className={s.cardPackColumnParams}>\r\n                    <Button type=\"primary\"\r\n                            danger\r\n                            onClick={() => deleteCardPack(pagination, sortPacks, record.cardPackId)}\r\n                            disabled={authUserId !== record.userId}>delete</Button>\r\n                    <AddUpdateFormModal modalTitle='Update a cards pack'\r\n                                        button={{\r\n                                            name: 'update',\r\n                                            params: {type: 'primary', disabled: authUserId !== record.userId}\r\n                                        }}>\r\n                        <AddUpdateForm sortPacks={sortPacks}\r\n                                       pagination={pagination}\r\n                                       actionName='Update'\r\n                                       user_id={user_id}\r\n                                       cardPackData={\r\n                                           cardPacks.filter(cardPack => cardPack._id === record.cardPackId)[0]}/>\r\n                    </AddUpdateFormModal>\r\n                    <Link to={`/pack/${record.cardPackId}`}>Cards</Link>\r\n                    <Link to={`/pack`}>Learn</Link>\r\n                </Space>\r\n            ),\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <div className=''>\r\n                <SwitchTable packsToggle={packsToggle}\r\n                             switchPacksHandler={() => switchPacksHandler()}\r\n                />\r\n                <Table dataSource={dataSource}\r\n                       columns={columns}\r\n                       pagination={pagination}\r\n                       loading={isFetching}\r\n                       onChange={onChangeTableParams}\r\n                />\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\n\r\n//Types\r\ntype sorterType = Record<string, ReactText[] | null>;\r\ntype columnsType =\r\n    ColumnsType<{ key: string; name: string | null; grade: number | null; userId: string | null; cardPackId: string | null; }>\r\n    | undefined\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport style from './Editor.module.css'\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {Button, Input} from \"antd\";\r\nimport {CloudDownloadOutlined, SaveOutlined, CloudUploadOutlined} from '@ant-design/icons';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {action} from \"../../redux/menu-reducer\";\r\n\r\n\r\nexport const Editor = () => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => { dispatch (action.setSelectedKey('editor')) }, [dispatch] )\r\n\r\n    const onChange = ({ target: { value } }:any ) => {\r\n        setValue(value)\r\n    }\r\n    const saveTextFile = (fileName: string, value: string) => {\r\n        const link = document.createElement(\"a\");\r\n        // создаём Blob из строк которые находятся в стэйте\r\n        const file = new Blob([value], {type: 'text/plain'});\r\n        //URL.createObjectURL берёт Blob и создаёт уникальный URL для него в формате blob:<origin>/<uuid>.\r\n        //пример: blob:https://javascript.info/1e67e00e-860d-40a5-89ae-6ab0cbee6273\r\n        link.href = URL.createObjectURL(file);\r\n        link.download = fileName;\r\n        link.click();\r\n        //удаляет внутреннюю ссылку на объект\r\n        URL.revokeObjectURL(link.href);\r\n        setValue('');\r\n    }\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.textEditor}>\r\n                <TextArea\r\n                    value={value}\r\n                    autoSize={{minRows: 3, maxRows: 5}}\r\n                    onChange={onChange}\r\n                />\r\n                <div className={style.btnGroup}>\r\n                    <Button onClick={() => saveTextFile('Text.txt', value )}\r\n                            type=\"primary\" icon={<SaveOutlined />}>\r\n                        Save\r\n                    </Button>\r\n                    <Button type=\"primary\" icon={<CloudUploadOutlined />} >Send</Button>\r\n                    <Button type=\"primary\" icon={<CloudDownloadOutlined />} >Download</Button>\r\n                </div>\r\n            </div>\r\n{/*            <div className={style.player}>\r\n                <ReactPlayer\r\n                    url={'https://www.youtube.com/watch?v=pnkuI8KXW_8&t=43s'}\r\n                    controls\r\n                    width='560px'\r\n                    height='315px'\r\n                />\r\n            </div>*/}\r\n            <Input type={'color'} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HeaderMenu} from \"./components/Menu/Menu\";\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {SignIn} from \"./components/Sign-In/SignIn\";\r\nimport {Register} from \"./components/Register/Register\";\r\nimport {Forgot} from \"./components/Forgot/Forgot\";\r\nimport {SetNewPass} from \"./components/Set-New-Pass/SetNewPass\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getInitializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport {Preloader} from \"./components/Preloader/Preloader\";\r\nimport AuthenticationRoute from \"./utils/AuthenticationRoute\";\r\nimport {Packs} from \"./components/Packs/Packs\";\r\nimport {Editor} from \"./components/Editor/Editor\";\r\n\r\n\r\n\r\nfunction App () {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getInitializeApp())\r\n    }, [dispatch])\r\n\r\n    const initialize = useSelector((state: AppStateType) => state.initializeApp.initialize)\r\n\r\n    if (!initialize) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <HeaderMenu/>\r\n            <Switch>\r\n                <Route path='/' exact render={() => <Redirect to='/profile'/>}/>\r\n                <AuthenticationRoute path='/profile' exact={true} Component={ Profile } />\r\n                <AuthenticationRoute path='/packs' exact={true} Component={ Packs } />\r\n                <AuthenticationRoute path='/editor' exact={true} Component={Editor} />\r\n                <Route path='/sign-in' exact render={() => <SignIn/>}/>\r\n                <Route path='/register' exact render={() => <Register/>}/>\r\n                <Route path='/forgot' exact render={() => <Forgot/>}/>\r\n                <Route path='/set-new-password' exact render={() => <SetNewPass/>}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {forgotReducer} from \"./forgot-reducer\";\r\nimport { registerReducer } from \"./register-reducer\";\r\nimport signInReducer from \"./sign-in-reducer\";\r\nimport {SetNewPassReducer} from \"./set-new-pass-reducer\";\r\nimport {InitializeApp} from \"./app-reducer\";\r\nimport {ProfileReducer} from \"./profile-reducer\";\r\nimport {MenuReducer} from \"./menu-reducer\";\r\nimport {packsReducer} from \"./packs-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    forgotPage: forgotReducer,\r\n    register: registerReducer,\r\n    profile: ProfileReducer,\r\n    initializeApp: InitializeApp,\r\n    restPass: SetNewPassReducer,\r\n    singInReducer: signInReducer,\r\n    menu: MenuReducer,\r\n    packs: packsReducer\r\n});\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddPackForm\":\"AddUpdateForm_AddPackForm__2cV_C\",\"packParam\":\"AddUpdateForm_packParam__1a7m8\",\"errAlert\":\"AddUpdateForm_errAlert__1Ckcv\",\"gradeGroup\":\"AddUpdateForm_gradeGroup__gedW4\",\"Create\":\"AddUpdateForm_Create__1n0_5\"};"],"sourceRoot":""}