{"version":3,"sources":["components/Sign-In/SignIn.module.css","components/Register/Register.module.css","components/Preloader/Preloader.module.css","components/Menu/Menu.tsx","utils/CookieToken/SaveTokenCookie.ts","api/signInApi.ts","redux/profile-reducer.ts","components/Profile/Profile.tsx","redux/sign-in-reducer.ts","utils/validators/validators.ts","components/Sign-In/SignIn.tsx","api/registerApi.ts","redux/register-reducer.ts","components/Register/Register.tsx","api/forgot-page.ts","redux/forgot-reducer.ts","components/Success/Success.tsx","components/Forgot/Forgot.tsx","api/resetPasswordApi.ts","redux/set-new-pass-reducer.ts","components/Set-New-Pass/SetNewPass.tsx","redux/app-reducer.ts","components/Preloader/Preloader.tsx","App.tsx","redux/store.ts","index.tsx","components/Forgot/Forgot.module.css","components/Set-New-Pass/SetNewPass.module.css"],"names":["module","exports","HeaderMenu","mode","Item","key","to","cookie","Cookie","get","value","set","remove","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","data","token","initialState","profile","_id","name","avatar","publicCardPacksCount","isAdmin","verified","isAuth","actions","type","payload","getAuthData","dispatch","a","saveTokenInCookie","console","log","message","Profile","IconFont","createFromIconfontCN","scriptUrl","useDispatch","logoutProfile","useCallback","useSelector","state","src","undefined","alt","size","style","backgroundColor","icon","UserOutlined","onClick","success","isFetching","errorMessage","signInReducer","action","schemaSignInForm","yup","shape","required","min","schemaRegisterForm","passwordConfirmation","label","test","this","parent","schemaForgotPage","schemaSetNewPassForm","SignIn","useForm","resolver","yupResolver","register","handleSubmit","errors","control","reset","singInReducer","className","signInPage","onSubmit","response","error","signIn","signInPage__form","as","Input","placeholder","showIcon","Password","ref","loading","htmlType","registerAPI","SET_USER_DATA_SUCCESS","addedUser","created","updated","__v","userData","Register","userRegistrationCallback","userRegisteration","registerPage","registerPage__form","forgotPageAPI","html1","html2","Success","status","title","subTitle","Forgot","forgotPage","resetPassword","result","html","match","resetPasswordToken","forgotForm","resetPasswordApi","SetNewPass","restPass","sendNewPass","setNewPassPage","setNewPassPage__info","setNewPassPage__form","initialize","Preloader","example","App","useEffect","authPromise","Promise","all","initializeApp","path","exact","render","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7f65b165.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"signInPage\":\"SignIn_signInPage__WFi5q\",\"signInPage__form\":\"SignIn_signInPage__form__1tCuA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerPage\":\"Register_registerPage__5npDg\",\"registerPage__form\":\"Register_registerPage__form__2krKA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"example\":\"Preloader_example__3s1ng\"};","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Menu} from 'antd';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport function HeaderMenu() {\r\n\r\n    return (\r\n        <Menu mode=\"horizontal\">\r\n            <Menu.Item key=\"profile\">\r\n                <NavLink  to='/profile'>Profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"sign-in\">\r\n                <NavLink to='/sign-in'>Sign-in</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"forgot\">\r\n                <NavLink to='/packs'>Packs</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"set-new-pass\">\r\n                <NavLink to='/cards'>Cards</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}","import Cookie from 'universal-cookie'\r\n\r\nconst cookie = new Cookie();\r\n\r\nclass saveTokenInCookie {\r\n\r\n    get (key: string) {\r\n        return cookie.get(key)\r\n    }\r\n\r\n    set (key: string, value: string) {\r\n        cookie.set(key, value)\r\n    }\r\n\r\n    remove(key: string) {\r\n        cookie.remove(key)\r\n    }\r\n}\r\n\r\nexport default new saveTokenInCookie();","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: 'http://localhost:7542/1.0/'*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\ntype ResponseType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: string\r\n    publicCardPacksCount: number\r\n    token: string\r\n    success: boolean\r\n};\r\n\r\nexport const authAPI = {\r\n    signIn(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    getAuth (token: string) {\r\n        return instance.post(`auth/me`, {token})\r\n            .then(res => res.data)\r\n    },\r\n};","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\nimport {authAPI} from \"../api/signInApi\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    profile: {\r\n        _id: null as (string | null),\r\n        email: null as (string | null),\r\n        name: null as (string | null),\r\n        avatar: null as (string | null),\r\n        publicCardPacksCount: null as (number | null),\r\n        isAdmin: null as (boolean | null),\r\n        verified: null as (boolean | null),\r\n    },\r\n    isAuth: false\r\n}\r\n\r\n//Reducer\r\nexport const ProfileReducer = (state: InitialState = initialState, action: ActionsType): InitialState => {\r\n    switch (action.type) {\r\n        case \"USER_PROFILE/SET_PROFILE_DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"USER_PROFILE/SET_AUTH_VALUE\": {\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nexport const actions = {\r\n    setProfileData: (profile: ProfileType, isAuth: boolean) => ({\r\n        type: \"USER_PROFILE/SET_PROFILE_DATA\",\r\n        payload: {\r\n            profile,\r\n            isAuth\r\n        }\r\n    } as const),\r\n    logoutFromProfile: (isAuth: boolean) => ({ type: 'USER_PROFILE/SET_AUTH_VALUE', isAuth } as const)\r\n}\r\n\r\n//Thunk\r\nexport const getAuthData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const token = saveTokenInCookie.get('auth_token');\r\n        let data = await authAPI.getAuth(token)\r\n        saveTokenInCookie.set('auth_token', data.token);\r\n        let {_id, email, isAdmin, name, verified, publicCardPacksCount, avatar} = data;\r\n        dispatch(actions.setProfileData({_id, email, isAdmin, name, verified, publicCardPacksCount, avatar}, true));\r\n    } catch (e) {\r\n        console.log(e.message)\r\n\r\n    }\r\n}\r\n\r\n//Types\r\ntype InitialState = typeof initialState\r\ntype ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionsType>","import React, {useCallback} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Avatar, Button} from \"antd\";\r\nimport {createFromIconfontCN} from '@ant-design/icons';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {actions} from \"../../redux/profile-reducer\";\r\nimport saveTokenInCookie from \"../../utils/CookieToken/SaveTokenCookie\"\r\n\r\nexport const Profile = () => {\r\n\r\n    const IconFont = createFromIconfontCN({\r\n        scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js',\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutProfile = useCallback(\r\n        () =>\r\n            dispatch(actions.logoutFromProfile(false)),\r\n        [dispatch]\r\n    )\r\n    const logout = () => {\r\n        logoutProfile();\r\n        saveTokenInCookie.remove('auth_token');\r\n    }\r\n\r\n    const {email, name, verified, publicCardPacksCount, avatar} = useSelector(\r\n        (state: AppStateType) => state.profile.profile\r\n    );\r\n    const isAuth = useSelector((state: AppStateType) => state.profile.isAuth);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to='/sign-in'/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Profile</h3>\r\n            </div>\r\n            <div>\r\n                {avatar\r\n                    ? <img src={avatar || undefined} alt=\"profile avatar\"/>\r\n                    : <Avatar size={64} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                }\r\n\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <h4>Name</h4>\r\n                    <span>{name}</span>\r\n                </div>\r\n                <div>\r\n                    <h4>Card Pack</h4>\r\n                    <span>{publicCardPacksCount}</span>\r\n                </div>\r\n                <div>\r\n                    <h4>Email</h4>\r\n                    <span>{email}</span>\r\n                </div>\r\n            </div>\r\n            <Button onClick={() => logout()} type=\"primary\" icon={<IconFont type=\"icon-tuichu\"/>}>\r\n                Logout\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import {authAPI} from '../api/signInApi';\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\nimport {getAuthData} from \"./profile-reducer\";\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, ActionType>\r\ntype ActionType = InferActionTypes<typeof actions>\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    _id: null as (null | string),\r\n    email: null as (null | string),\r\n    success: false,\r\n    isFetching: false,\r\n    errorMessage: ''\r\n};\r\n\r\n\r\n//reducer\r\nconst signInReducer = (state: initialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"SIGNIN/SET_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"SIGNIN/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SIGNIN/SET_MESSAGE_ERROR\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n//action\r\nexport const actions = {\r\n    setAuthUserDataSuccess: (_id: string, email: string, success: boolean) => ({type: \"SIGNIN/SET_USER_DATA\", payload: {_id, email, success}} as const),\r\n    setAuthUserDataError: ( errorMessage: string) => ({type: \"SIGNIN/SET_MESSAGE_ERROR\", errorMessage} as const ),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"SIGNIN/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//thunk to login\r\nexport const signIn = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setAuthUserDataError(\"\"));\r\n        let data = await authAPI.signIn(email, password, rememberMe);\r\n        saveTokenInCookie.set('auth_token', data.token);\r\n        dispatch(actions.setAuthUserDataSuccess(data._id, data.email, data.success));\r\n        dispatch(getAuthData());\r\n    } catch (e) {\r\n        dispatch(actions.setAuthUserDataError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(actions.toggleIsFetching(false));\r\n};\r\n\r\nexport default signInReducer;\r\n","import * as yup from \"yup\";\r\n\r\nexport const schemaSignInForm = yup.object().shape({\r\n    email: yup.string().required().min(2),\r\n    password: yup.string().required().min(8),\r\n});\r\n\r\nexport const schemaRegisterForm = yup.object().shape({\r\n    email: yup.string().email().required().min(7),\r\n    password: yup.string().required().min(8),\r\n    passwordConfirmation: yup.string().required().label('Confirm password')\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});\r\nexport const schemaForgotPage = yup.object().shape({\r\n    email: yup.string().email().required(),\r\n});\r\nexport const schemaSetNewPassForm = yup.object().shape({\r\n    password: yup.string().required().min(8),\r\n    passwordConfirmation: yup.string().required()\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});","import React from 'react';\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {Alert, Button, Input} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../../redux/sign-in-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport style from './SignIn.module.css'\r\nimport {schemaSignInForm} from \"../../utils/validators/validators\";\r\n\r\n//react-hook-form\r\ntype  LoginData = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean\r\n}\r\n\r\n//using hook\r\nexport const SignIn = () => {\r\n    const dispatch = useDispatch();\r\n    const {register, handleSubmit, errors, control, reset} = useForm<LoginData>({\r\n        resolver: yupResolver(schemaSignInForm)\r\n    });\r\n\r\n//dispatch thunk\r\n    const onSubmit = (data: LoginData) => {\r\n        let {email, password, rememberMe} = data;\r\n        dispatch(signIn(email, password, rememberMe));\r\n    };\r\n\r\n    //checking logged user or not\r\n    const isAuth = useSelector((state: AppStateType) => state.profile.isAuth);\r\n    const {isFetching, errorMessage} = useSelector((state: AppStateType) => state.singInReducer);\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={`/profile`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.signInPage}>\r\n\r\n            <div>\r\n                <h3>SignIn</h3>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.signInPage__form}>\r\n                <div>\r\n                    <Controller\r\n                        as={Input}\r\n                        name=\"email\"\r\n                        control={control}\r\n                        placeholder=\"Email\"\r\n                    />\r\n                    {errors.email && <Alert message=\"Login is required\" type=\"error\" showIcon/>}\r\n                </div>\r\n                <div>\r\n                    <Controller\r\n                        as={Input.Password}\r\n                        name=\"password\"\r\n                        control={control}\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    {errors.password && <Alert message=\"Password is required\" type=\"error\" showIcon/>}\r\n                </div>\r\n\r\n                <Link to='/forgot'>Forgot your password?</Link>\r\n                <div>\r\n                    <input type='checkbox' name='rememberMe' ref={register}/>\r\n                    {` Remember me`}\r\n                </div>\r\n                <Button onClick={ () => reset() } loading={isFetching} htmlType='submit' type='primary'>Sign In</Button>\r\n            </form>\r\n            <span>or</span>\r\n            <Link to='/register'>Registration</Link>\r\n        </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\ntype addedUserResponseType = {\r\n    created: string,\r\n    email: string,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    updated: string,\r\n    verified: boolean,\r\n    __v: number,\r\n    _id: string,\r\n}\r\n\r\ntype ResponseType = {\r\n    addedUser: addedUserResponseType,\r\n    success: boolean\r\n}\r\n\r\nexport const registerAPI = {\r\n    register: (email: string, password: string) => instance.post<ResponseType>(`auth/register`, {email: email, password: password})\r\n        .then(res => res.data)\r\n};","import {registerAPI} from \"../api/registerApi\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER_DATA_SUCCESS = 'authorization-module-project/registerReducer/SET_USER_DATA_SUCCESS';\r\n\r\ntype addedUser = {\r\n    created: string | null,\r\n    email: string | null,\r\n    isAdmin: boolean,\r\n    name: string | null,\r\n    publicCardPacksCount: number | null,\r\n    rememberMe: boolean,\r\n    updated: string | null,\r\n    verified: boolean,\r\n    __v: number | null,\r\n    _id: string | null,\r\n}\r\n\r\ntype initialState = {\r\n    addedUser: addedUser,\r\n    success: boolean\r\n};\r\n\r\nconst initialState: initialState = {\r\n    addedUser: {\r\n        created: null,\r\n        email: null,\r\n        isAdmin: false,\r\n        name: null,\r\n        publicCardPacksCount: null,\r\n        rememberMe: false,\r\n        updated: null,\r\n        verified: false,\r\n        __v: null,\r\n        _id: null,\r\n    },\r\n    success: false\r\n};\r\n\r\nexport const registerReducer = (state: initialState = initialState, action: registerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addedUser: {...action.payload.addedUser},\r\n                success: action.payload.success\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Actions\r\ntype InferRegisterActionTypes<T> = T extends {[key: string]: infer U} ? U : never;\r\ntype registerActionTypes = ReturnType<InferRegisterActionTypes<typeof actions>>\r\n\r\nconst actions = {\r\n    registerUserDataSuccess : (userData: initialState) => ({type: SET_USER_DATA_SUCCESS, payload: {...userData}} as const),\r\n}\r\n\r\n//Thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, registerActionTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, {}, registerActionTypes>\r\n\r\nexport const userRegisteration = (email: string, password: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const data = await registerAPI.register(email, password);\r\n        dispatch(actions.registerUserDataSuccess(data))\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {userRegisteration} from \"../../redux/register-reducer\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {useCallback} from \"react\";\r\nimport {Button, Input} from \"antd\";\r\nimport style from './Register.module.css'\r\nimport {schemaRegisterForm} from \"../../utils/validators/validators\";\r\n\r\ntype IFormInputs = {\r\n    email: string,\r\n    password: string,\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const Register = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.register.success);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<IFormInputs>({\r\n        resolver: yupResolver(schemaRegisterForm)\r\n    });\r\n\r\n    const userRegistrationCallback = useCallback((email: string, password: string) =>\r\n            dispatch(userRegisteration(email, password)),\r\n        [dispatch]\r\n    );\r\n\r\n    const onSubmit = (data: IFormInputs) => {\r\n        userRegistrationCallback(data.email, data.password);\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/sign-in\"/>\r\n    }\r\n    return (\r\n        <div className={style.registerPage}>\r\n            <div>\r\n                <h3>Registration</h3>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.registerPage__form}>\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n                <p>{errors.email?.message}</p>\r\n                <Controller\r\n                    as={Input.Password}\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Password\"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n\r\n                <Controller\r\n                    as={Input.Password}\r\n                    type='password'\r\n                    name=\"passwordConfirmation\"\r\n                    control={control}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n                <p>{errors.passwordConfirmation?.message}</p>\r\n                <Button onClick={ () => reset() } htmlType='submit' type=\"primary\">Register</Button>\r\n            </form>\r\n            <Link to='/sign-in'>Sign In</Link>\r\n        </div>\r\n    );\r\n};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"http://localhost:7542/1.0/\",\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\n\r\nexport const forgotPageAPI = {\r\n    forgot (email: string, html1 = \"<a href='http://localhost:3000/authorization-module#/set-new-password'\", html2 = \">reset-password-link</a>\") {\r\n        return instance.post(\"/auth/forgot\", {email, html1, html2})\r\n            .then(response => response.data)\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {forgotPageAPI} from \"../api/forgot-page\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\n\r\n//State\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    isFetching: false,\r\n}\r\n\r\n//Reducer\r\nexport const forgotReducer = (state: InitialState = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                success: action.success,\r\n            }\r\n        }\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_ERROR': {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        case \"FORGOTPAGE/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nconst action = {\r\n    setChangePasswordSuccess: (success: boolean) => ({\r\n        type: 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS',\r\n        success\r\n    } as const ),\r\n    setChangePasswordError: (errorMessage: string) => ({\r\n        type: 'FORGOTPAGE/CHANGE_PASSWORD_ERROR',\r\n        errorMessage\r\n    } as const ),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"FORGOTPAGE/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//Thunk\r\nexport const changePassword = (email: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(action.toggleIsFetching(true));\r\n        dispatch(action.setChangePasswordError(\"\"));\r\n        let data = await forgotPageAPI.forgot(email);\r\n        let result = data.html.match(/(.*)set-new-password'(.*?)>(.*)/);\r\n        const resetPasswordToken = result[2];\r\n        saveTokenInCookie.set('resetPasswordToken', resetPasswordToken);\r\n        dispatch(action.setChangePasswordSuccess(data.success))\r\n    } catch (e) {\r\n        dispatch(action.setChangePasswordError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(action.toggleIsFetching(false))\r\n}\r\n\r\n//Types\r\ntype ActionTypes = InferActionTypes <typeof action>\r\ntype InitialState = typeof initialState\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionTypes>\r\n","import React from \"react\";\r\nimport {Result} from \"antd\";\r\n\r\n\r\nexport function Success() {\r\n    return (\r\n        <Result\r\n            status=\"success\"\r\n            title= 'Check your email'\r\n            subTitle=\"We've sent an email to ... . Click the link in the email to reset your password\r\n            If you don't see the email, check other places it might be, like your junk, social, spam, or other folders.\"\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {Button, Input, Alert} from 'antd';\r\nimport style from './Forgot.module.css'\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {changePassword} from \"../../redux/forgot-reducer\";\r\nimport {schemaForgotPage} from '../../utils/validators/validators';\r\nimport {Success} from '../Success/Success';\r\n\r\ntype InputEmailType = {\r\n    email: string\r\n}\r\n\r\nexport const Forgot: React.FC = () => {\r\n    const {handleSubmit, errors, control, reset} = useForm<InputEmailType>({resolver: yupResolver(schemaForgotPage)});\r\n    const onSubmit = (data: InputEmailType) => {\r\n        resetPassword(data.email);\r\n    };\r\n\r\n    const {errorMessage, isFetching, success} = useSelector((state: AppStateType) => state.forgotPage);\r\n    const dispatch = useDispatch();\r\n    const resetPassword = useCallback((data) => dispatch(changePassword(data)), [dispatch])\r\n    console.log(\"Render Forgot\");\r\n\r\n    if (success) {\r\n        return <Success />\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgotPage}>\r\n            {errorMessage &&\r\n            <Alert message={errorMessage} type=\"warning\" showIcon/>\r\n            }\r\n            <h3>Forgot password?</h3>\r\n            <span>Please enter <b>email</b> that you used to sign in</span>\r\n            <form className={style.forgotForm} onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={style.error}>\r\n                    {errors.email\r\n                        ? <Alert message={errors.email?.message} type=\"error\" showIcon/>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n                <Button onClick={() => reset()} loading={isFetching} htmlType=\"submit\" type='primary'>Send email</Button>\r\n            </form>\r\n            <Link to={'/sign-in'}>Sign In</Link>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\nexport const resetPasswordApi = {\r\n    resetPassword (resetPasswordToken: string, password: string) {\r\n        return instance.post('/auth/set-new-password', {resetPasswordToken, password})\r\n            .then(res=> res.data)\r\n    }\r\n}","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {resetPasswordApi} from \"../api/resetPasswordApi\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\n\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    isFetching: false\r\n}\r\n\r\n//Reducer\r\nexport const SetNewPassReducer = (state: InitialState = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"RESET/SET_NEW_PASS_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                success: action.success\r\n            }\r\n        }\r\n        case \"RESET/SET_NEW_PASS_ERROR\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.message\r\n            }\r\n        }\r\n        case \"RESET/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nconst actions = {\r\n    setNewPassSuccess: (success: boolean) => ({type: \"RESET/SET_NEW_PASS_SUCCESS\", success} as const),\r\n    setNewPassError: (message: string) => ({type: \"RESET/SET_NEW_PASS_ERROR\", message} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"RESET/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//Thunk\r\nexport const resetPassword = (password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        const resetPasswordToken = saveTokenInCookie.get('resetPasswordToken');\r\n        let data = await resetPasswordApi.resetPassword(resetPasswordToken, password);\r\n        dispatch(actions.setNewPassSuccess(data))\r\n    } catch (e) {\r\n        dispatch(actions.setNewPassError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(actions.toggleIsFetching(false))\r\n}\r\n\r\n\r\n//Types\r\ntype InitialState = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>","import React, {useCallback} from 'react';\r\nimport style from \"./SetNewPass.module.css\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {Button, Input} from \"antd\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {schemaSetNewPassForm} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {resetPassword} from \"../../redux/set-new-pass-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype SetNewPassType = {\r\n    password: string\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const SetNewPass = () => {\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<SetNewPassType>({\r\n        resolver: yupResolver(schemaSetNewPassForm)\r\n    });\r\n    const onSubmit = (data: SetNewPassType) => {\r\n        sendNewPass(data.password);\r\n    };\r\n    const {success, isFetching} = useSelector((state: AppStateType) => state.restPass);\r\n\r\n    const dispatch = useDispatch();\r\n    const sendNewPass = useCallback(\r\n        (data) => dispatch(resetPassword(data)),\r\n        [dispatch]\r\n    )\r\n\r\n    if (success) {\r\n        return <Redirect to='/sign-in'/>\r\n    }\r\n    return (\r\n        <div className={style.setNewPassPage}>\r\n            <div className={style.setNewPassPage__info}>\r\n                <h3>Choose a New Password</h3>\r\n                <span>Create a new password that is at least 8 characters long</span>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.setNewPassPage__form}>\r\n                <Controller\r\n                    as={Input.Password}\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Password\"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n\r\n                <Controller\r\n                    as={Input.Password}\r\n                    type='password'\r\n                    name=\"passwordConfirmation\"\r\n                    control={control}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n                <p>{errors.passwordConfirmation?.message}</p>\r\n                <Button onClick={ () => reset() } loading={isFetching} htmlType='submit' type=\"primary\">Continue</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {getAuthData} from \"./profile-reducer\";\r\n\r\nlet initialState  =  {\r\n    initialize: false\r\n}\r\n\r\n//Reducer\r\nexport const InitializeApp = (state: InitialState = initialState, action: ActionTypes ) => {\r\n    switch (action.type) {\r\n        case \"APP/SET_INITIALIZE_APP\": {\r\n            return {\r\n                ...state,\r\n                initialize: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nconst action = {\r\n    setInitializeApp: () => ({type: 'APP/SET_INITIALIZE_APP'} as const )\r\n}\r\n\r\n//Thunk\r\n\r\nexport const getInitializeApp = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        let authPromise =  await dispatch(getAuthData());\r\n        Promise.all([authPromise])\r\n            .then(\r\n                () => dispatch(action.setInitializeApp())\r\n            )\r\n    } catch (e) {\r\n        console.log(e.message)\r\n    }\r\n}\r\n\r\n//Type\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionTypes>\r\ntype InitialState = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof action>","import React from \"react\";\r\nimport {Spin} from \"antd\";\r\nimport style from \"./Preloader.module.css\"\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={style.example}>\r\n            <Spin />\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HeaderMenu} from \"./components/Menu/Menu\";\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {SignIn} from \"./components/Sign-In/SignIn\";\r\nimport {Register} from \"./components/Register/Register\";\r\nimport {Forgot} from \"./components/Forgot/Forgot\";\r\nimport {SetNewPass} from \"./components/Set-New-Pass/SetNewPass\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getInitializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport {Preloader} from \"./components/Preloader/Preloader\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getInitializeApp())\r\n    }, [dispatch])\r\n\r\n    const initialize = useSelector((state: AppStateType) => state.initializeApp.initialize)\r\n\r\n    if (!initialize) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <HeaderMenu/>\r\n            <Switch>\r\n                <Route path='/' exact render={() => <Redirect to='/profile'/>}/>\r\n                <Route path='/profile' exact render={() => <Profile />}/>\r\n                <Route path='/sign-in' exact render={() => <SignIn/>}/>\r\n                <Route path='/register' exact render={() => <Register/>}/>\r\n                <Route path='/forgot' exact render={() => <Forgot/>}/>\r\n                <Route path='/set-new-password' exact render={() => <SetNewPass/>}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {forgotReducer} from \"./forgot-reducer\";\r\nimport { registerReducer } from \"./register-reducer\";\r\nimport signInReducer from \"./sign-in-reducer\";\r\nimport {SetNewPassReducer} from \"./set-new-pass-reducer\";\r\nimport {InitializeApp} from \"./app-reducer\";\r\nimport {ProfileReducer} from \"./profile-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    forgotPage: forgotReducer,\r\n    register: registerReducer,\r\n    profile: ProfileReducer,\r\n    initializeApp: InitializeApp,\r\n    restPass: SetNewPassReducer,\r\n    singInReducer: signInReducer\r\n});\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPage\":\"Forgot_forgotPage__neKLE\",\"error\":\"Forgot_error__BLT2U\",\"forgotForm\":\"Forgot_forgotForm__UfYTJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setNewPassPage\":\"SetNewPass_setNewPassPage__3smxh\",\"setNewPassPage__info\":\"SetNewPass_setNewPassPage__info__DRlit\",\"setNewPassPage__form\":\"SetNewPass_setNewPassPage__form__21O7x\"};"],"sourceRoot":""}