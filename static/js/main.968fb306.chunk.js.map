{"version":3,"sources":["components/Menu/Menu.tsx","components/api/signInApi.ts","redux/sign-in-reducer.ts","components/Profile/Profile.tsx","components/Sign-In/SignIn.tsx","api/registerApi.ts","redux/register-reducer.ts","components/Register/Register.tsx","api/forgot-page.ts","redux/forgot-reducer.ts","components/Forgot/Forgot.tsx","components/Set-New-Pass/SetNewPass.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","components/Forgot/Forgot.module.css"],"names":["HeaderMenu","mode","Item","key","to","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","data","catch","e","delete","initialState","_id","isAdmin","name","verified","publicCardPacksCount","__v","token","success","setAuthUserDataSuccess","type","authUserData","signOut","dispatch","a","signInReducer","state","action","Profile","props","useDispatch","onClick","schema","yup","shape","required","min","SignIn","useForm","resolver","yupResolver","register","handleSubmit","errors","isAuth","useSelector","singInReducer","onSubmit","signIn","console","log","ref","message","showIcon","registerAPI","SET_USER_DATA_SUCCESS","addedUser","created","updated","actions","userData","payload","passwordConfirmation","label","test","value","this","parent","Register","userRegisterationCallback","useCallback","userRegisteration","htmlFor","id","forgotPageAPI","html1","html2","response","errorMessage","testEmail","Forgot","control","forgotPage","resetPassword","error","className","style","closable","forgotForm","as","Input","placeholder","htmlType","SetNewPass","App","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.968fb306.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Menu } from 'antd';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nexport function HeaderMenu() {\r\n    return (\r\n        <Menu mode=\"horizontal\">\r\n            <Menu.Item key=\"profile\">\r\n                <NavLink to='/profile'>Profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"sign-in\">\r\n                <NavLink to='/sign-in'>Sign-in</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"register\">\r\n                <NavLink to='/register'>Register</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"forgot\">\r\n                <NavLink to='/forgot'>Forgot</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"set-new-pass\">\r\n                <NavLink to='/set-new-pass'>Set new pass</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:7542/1.0/'\r\n});\r\n\r\ntype ResponseType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: string\r\n    publicCardPacksCount: number\r\n    __v: number\r\n    password: string\r\n    token: string\r\n    success: boolean\r\n};\r\n\r\nexport const authAPI = {\r\n    signIn(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n            .catch(e => e)\r\n    },\r\n    signOut() {\r\n        return instance.delete(`auth/login`)\r\n            .then(res => res.data)\r\n            .catch(e => e)\r\n    }\r\n};","import {authAPI} from \"../components/api/signInApi\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, {}, setAuthUserDataSuccessType>\r\n\r\ntype initialStateType = {\r\n    _id: string | null\r\n    email: string | null\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string | null\r\n    verified: string | null\r\n    publicCardPacksCount: number | null\r\n    __v: number | null\r\n    password: string | null\r\n    token: string | null\r\n    success: boolean\r\n};\r\n\r\nconst initialState: initialStateType = {\r\n    _id: null,\r\n    email: null,\r\n    rememberMe: false,\r\n    isAdmin: false,\r\n    name: null,\r\n    verified: null,\r\n    publicCardPacksCount: null,\r\n    __v: null,\r\n    password: null,\r\n    token: null,\r\n    success: false\r\n};\r\n\r\n\r\n//reducer\r\nconst signInReducer = (state = initialState, action: setAuthUserDataSuccessType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.authUserData\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n//actionType\r\nexport type setAuthUserDataSuccessType = {\r\n    type: typeof SET_USER_DATA,\r\n    authUserData: initialStateType\r\n}\r\n\r\n//action\r\nexport const setAuthUserDataSuccess = (data: initialStateType): setAuthUserDataSuccessType => ({\r\n    type: SET_USER_DATA,\r\n    authUserData: data\r\n});\r\n\r\n//thunk to login\r\nexport const signIn = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.signIn(email, password, rememberMe);\r\n    if (data.success) {\r\n        dispatch(setAuthUserDataSuccess(data))\r\n    }\r\n};\r\n\r\n//thunk to logout\r\nexport const signOut = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.signOut();\r\n    if (data.success) {\r\n        dispatch(setAuthUserDataSuccess({\r\n            _id: null,\r\n            email: null,\r\n            rememberMe: false,\r\n            isAdmin: false,\r\n            name: null,\r\n            verified: null,\r\n            publicCardPacksCount: null,\r\n            __v: null,\r\n            password: null,\r\n            token: null,\r\n            success: false\r\n        }))\r\n    }\r\n};\r\n\r\n\r\nexport default signInReducer;\r\n","import * as React from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {signOut} from \"../../redux/sign-in-reducer\";\r\n\r\ntype Props = {};\r\nexport const Profile = (props: Props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const logout = () => {\r\n        dispatch(signOut)\r\n    };\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Profile</h3>\r\n            </div>\r\n            <button onClick={logout}>Logout</button>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport * as yup from \"yup\";\r\nimport {Alert} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../../redux/sign-in-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\ntype Props = {};\r\n\r\n//react-hook-form\r\ntype  LoginData = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean\r\n}\r\n\r\n//validation\r\nconst schema = yup.object().shape({\r\n    email: yup.string().required().min(2),\r\n    password: yup.string().required().min(8),\r\n});\r\n\r\n//using hook\r\nexport const SignIn = (props: Props) => {\r\n    const dispatch = useDispatch();\r\n    const {register, handleSubmit, errors} = useForm<LoginData>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n//dispatch thunk\r\n    const onSubmit = (data: LoginData) => {\r\n        let {email, password, rememberMe} = data;\r\n        dispatch(signIn(email, password, rememberMe));\r\n        console.log(data);\r\n    };\r\n\r\n    //checking logged user or not\r\n    const isAuth = useSelector((state: AppStateType) => state.singInReducer.success);\r\n\r\n    return (\r\n        <>\r\n            {!isAuth ?\r\n                <div>\r\n                    <div>\r\n                        <h3>SignIn</h3>\r\n                    </div>\r\n                    <div>\r\n                        <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <div>\r\n                                <label>Login: </label>\r\n                                <input name=\"email\" type=\"text\" ref={register}/>\r\n                                {errors.email && <Alert message=\"Login is required\" type=\"error\" showIcon/>}\r\n                            </div>\r\n                            <div>\r\n                                <label>Password: </label>\r\n                                <input name=\"password\" type=\"password\" ref={register}/>\r\n                                {errors.password && <Alert message=\"Password is required\" type=\"error\" showIcon/>}\r\n                            </div>\r\n                            <div>\r\n                                <input type=\"checkbox\" name=\"rememberMe\" ref={register}/>\r\n                                {'Remember me'}\r\n                            </div>\r\n                            <button type=\"submit\">Enter</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                : <Redirect to={`/profile`}/>}\r\n        </>\r\n    );\r\n};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/1.0/\",\r\n});\r\n\r\ntype addedUserResponseType = {\r\n    created: string,\r\n    email: string,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    updated: string,\r\n    verified: boolean,\r\n    __v: number,\r\n    _id: string,\r\n}\r\n\r\ntype ResponseType = {\r\n    addedUser: addedUserResponseType,\r\n    success: boolean\r\n}\r\n\r\nexport const registerAPI = {\r\n    register: (email: string, password: string) => instance.post<ResponseType>(`auth/register`, {email: email, password: password})\r\n        .then(res => res.data)\r\n};","import {registerAPI} from \"../api/registerApi\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER_DATA_SUCCESS = 'authorization-module-project/registerReducer/SET_USER_DATA_SUCCESS';\r\n\r\ntype addedUser = {\r\n    created: string | null,\r\n    email: string | null,\r\n    isAdmin: boolean,\r\n    name: string | null,\r\n    publicCardPacksCount: number | null,\r\n    rememberMe: boolean,\r\n    updated: string | null,\r\n    verified: boolean,\r\n    __v: number | null,\r\n    _id: string | null,\r\n}\r\n\r\ntype initialState = {\r\n    addedUser: addedUser,\r\n    success: boolean\r\n};\r\n\r\nconst initialState: initialState = {\r\n    addedUser: {\r\n        created: null,\r\n        email: null,\r\n        isAdmin: false,\r\n        name: null,\r\n        publicCardPacksCount: null,\r\n        rememberMe: false,\r\n        updated: null,\r\n        verified: false,\r\n        __v: null,\r\n        _id: null,\r\n    },\r\n    success: false\r\n};\r\n\r\nexport const registerReducer = (state: initialState = initialState, action: registerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addedUser: {...action.payload.addedUser},\r\n                success: action.payload.success\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Actions\r\ntype InferRegisterActionTypes<T> = T extends {[key: string]: infer U} ? U : never;\r\ntype registerActionTypes = ReturnType<InferRegisterActionTypes<typeof actions>>\r\n\r\nconst actions = {\r\n    registerUserDataSuccess : (userData: initialState) => ({type: SET_USER_DATA_SUCCESS, payload: {...userData}} as const),\r\n}\r\n\r\n//Thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, registerActionTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, {}, registerActionTypes>\r\n\r\nexport const userRegisteration = (email: string, password: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const data = await registerAPI.register(email, password);\r\n        dispatch(actions.registerUserDataSuccess(data))\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n","import * as React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {userRegisteration} from \"../../redux/register-reducer\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport * as yup from \"yup\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useCallback} from \"react\";\r\n\r\nconst schema = yup.object().shape({\r\n    email: yup.string().email().required('test1').min(7),\r\n    password: yup.string().required('test2').min(8),\r\n    passwordConfirmation: yup.string().required('test3').label('Confirm password')\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});\r\n\r\ntype IFormInputs = {\r\n    email: string,\r\n    password: string,\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const Register = (props: {}) => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.register.success);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {register, handleSubmit, errors} = useForm<IFormInputs>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const userRegisterationCallback = useCallback((email: string, password: string) =>\r\n            dispatch(userRegisteration(email, password)),\r\n        [dispatch]\r\n    );\r\n\r\n    const onSubmit = (data: IFormInputs) => {\r\n        userRegisterationCallback(data.email, data.password);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isAuth ?\r\n                    <div>\r\n                        <h3>Congrats! You are registered!</h3>\r\n                        <NavLink to=\"/sign-in\">Sign-in</NavLink>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <h3>Registration:</h3>\r\n                        <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <label htmlFor={'email'}>Email: </label><br/>\r\n                            <input id=\"email\" type=\"text\" name=\"email\" ref={register}/>\r\n                            <p>{errors.email?.message}</p>\r\n\r\n                            <label htmlFor={'password'}>Password: </label><br/>\r\n                            <input id=\"password\" type=\"text\" name=\"password\" ref={register}/>\r\n                            <p>{errors.password?.message}</p>\r\n\r\n                            <label htmlFor={'passwordConfirmation'}>Confirm password: </label><br/>\r\n                            <input id=\"passwordConfirmation\" type=\"text\" name=\"passwordConfirmation\" ref={register}/>\r\n                            <p>{errors.passwordConfirmation?.message}</p>\r\n\r\n                            <input type=\"submit\"/>\r\n                        </form>\r\n                    </div>\r\n            }\r\n        </>\r\n    );\r\n};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/1.0/\",\r\n});\r\n\r\ntype ResponseType = {\r\n    success: boolean\r\n    error: string\r\n}\r\n\r\nexport const forgotPageAPI = {\r\n    forgot (email: string, html1 = \"<a href='http://localhost:3000/authorization-module#/forgot'\", html2 = \">reset-password-link</a>\") {\r\n        return instance.post<ResponseType>(\"/auth/forgot\", {email, html1, html2})\r\n            .then(response => response.data)\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\nimport {forgotPageAPI} from \"../api/forgot-page\";\r\n\r\n//State\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    testEmail: \"test@gmail.com\"\r\n}\r\n\r\n//Reducer\r\nexport const forgotReducer = (state: InitialState = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                success: action.success\r\n            }\r\n        }\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_ERROR': {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\ntype setChangePasswordSuccessType = {\r\n    type: 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS'\r\n    success: boolean\r\n}\r\nconst setChangePasswordSuccess = (success: boolean): setChangePasswordSuccessType => ({\r\n    type: 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS',\r\n    success\r\n});\r\ntype setChangePasswordErrorType = {\r\n    type: 'FORGOTPAGE/CHANGE_PASSWORD_ERROR'\r\n    errorMessage: string\r\n}\r\nconst setChangePasswordError = (errorMessage: string): setChangePasswordErrorType => ({\r\n    type: 'FORGOTPAGE/CHANGE_PASSWORD_ERROR',\r\n    errorMessage\r\n});\r\n\r\n//Thunk\r\nexport const changePassword = (email: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await forgotPageAPI.forgot(email);\r\n        dispatch(setChangePasswordSuccess(data.success))\r\n    } catch (e) {\r\n        let error = e.response.data.error;\r\n        dispatch(setChangePasswordError(error));\r\n        console.log(e.message)\r\n    }\r\n}\r\n\r\ntype ActionsType = setChangePasswordSuccessType | setChangePasswordErrorType\r\ntype InitialState = typeof initialState\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionsType>\r\n","import React, {useCallback} from 'react';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers';\r\nimport * as yup from \"yup\";\r\nimport {Button, Input, Alert} from 'antd';\r\nimport style from './Forgot.module.css'\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {changePassword} from \"../../redux/forgot-reducer\";\r\n\r\ntype InputEmailType = {\r\n    email: string\r\n}\r\n\r\nconst schema = yup.object().shape({\r\n    email: yup.string().email().required(),\r\n});\r\n\r\nexport const Forgot: React.FC = () => {\r\n    const {handleSubmit, errors, control} = useForm<InputEmailType>({ resolver: yupResolver(schema) });\r\n    const onSubmit = (data: InputEmailType) => {\r\n        resetPassword(data.email);\r\n        console.log(data)\r\n    };\r\n\r\n    const errorMessage = useSelector((state: AppStateType) => state.forgotPage.errorMessage);\r\n    const dispatch = useDispatch();\r\n    const resetPassword = useCallback(\r\n        (data) => dispatch( changePassword(data) ),\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <div className={style.forgotPage}>\r\n            { errorMessage &&\r\n            <Alert message={errorMessage} type=\"warning\" showIcon closable />\r\n            }\r\n\r\n            <h3>Forgot</h3>\r\n\r\n            <form className={style.forgotForm} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className={style.error}>\r\n                    { errors.email\r\n                        ? <Alert message={errors.email?.message} type=\"error\" showIcon />\r\n                        : null\r\n                    }\r\n                </div>\r\n\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n\r\n                <Button htmlType=\"submit\" type='primary'>Send email</Button>\r\n            </form>\r\n            <Link to={'/sign-in'}>Sign In</Link>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\n\r\ntype Props = {};\r\nexport const SetNewPass = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <h3>SetNewPass</h3>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport {HeaderMenu} from \"./components/Menu/Menu\";\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {SignIn} from \"./components/Sign-In/SignIn\";\r\nimport {Register} from \"./components/Register/Register\";\r\nimport {Forgot} from \"./components/Forgot/Forgot\";\r\nimport {SetNewPass} from \"./components/Set-New-Pass/SetNewPass\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='main'>\r\n            <HeaderMenu/>\r\n            <Route path='/' render={() => <Redirect to=\"/sign-in\"/>}/>\r\n            <Route path='/profile' render={() => <Profile/>}/>\r\n            <Route path='/sign-in' render={() => <SignIn/>}/>\r\n            <Route path='/register' render={() => <Register/>}/>\r\n            <Route path='/forgot' render={() => <Forgot/>}/>\r\n            <Route path='/set-new-pass' render={() => <SetNewPass/>}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {forgotReducer} from \"./forgot-reducer\";\r\nimport { registerReducer } from \"./register-reducer\";\r\nimport signInReducer from \"./sign-in-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    forgotPage: forgotReducer,\r\n    register: registerReducer,\r\n    singInReducer: signInReducer\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPage\":\"Forgot_forgotPage__neKLE\",\"error\":\"Forgot_error__BLT2U\",\"forgotForm\":\"Forgot_forgotForm__UfYTJ\"};"],"sourceRoot":""}