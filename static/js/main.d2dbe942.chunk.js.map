{"version":3,"sources":["components/Menu/Menu.tsx","components/Profile/Profile.tsx","api/signInApi.ts","utils/CookieToken/SaveTokenCookie.ts","redux/auth-reducer.ts","redux/sign-in-reducer.ts","utils/validators/validators.ts","components/Sign-In/SignIn.tsx","api/registerApi.ts","redux/register-reducer.ts","components/Register/Register.tsx","api/forgot-page.ts","redux/forgot-reducer.ts","components/Success/Success.tsx","components/Forgot/Forgot.tsx","api/resetPasswordApi.ts","redux/set-new-pass-reducer.ts","components/Set-New-Pass/SetNewPass.tsx","App.tsx","redux/store.ts","index.tsx","components/Forgot/Forgot.module.css","components/Set-New-Pass/SetNewPass.module.css","components/Sign-In/SignIn.module.css","components/Register/Register.module.css"],"names":["HeaderMenu","mode","Item","key","to","Profile","props","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","data","token","cookie","Cookie","get","value","set","remove","initialState","_id","name","isAdmin","publicCardPacksCount","isAuth","actions","type","payload","getAuthData","dispatch","a","saveTokenInCookie","console","log","message","success","isFetching","errorMessage","signInReducer","state","action","schemaSignInForm","yup","shape","required","min","schemaRegisterForm","passwordConfirmation","label","test","this","parent","schemaForgotPage","schemaSetNewPassForm","SignIn","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","errors","control","reset","useSelector","auth","singInReducer","className","style","signInPage","onSubmit","response","error","signIn","signInPage__form","as","Input","placeholder","showIcon","Password","ref","onClick","loading","htmlType","registerAPI","SET_USER_DATA_SUCCESS","addedUser","created","updated","verified","__v","userData","Register","userRegistrationCallback","useCallback","userRegisteration","registerPage","registerPage__form","forgotPageAPI","html1","html2","Success","status","title","subTitle","Forgot","forgotPage","resetPassword","result","html","match","resetPasswordToken","forgotForm","resetPasswordApi","SetNewPass","restPass","sendNewPass","setNewPassPage","setNewPassPage__info","setNewPassPage__form","App","useEffect","path","render","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d2dbe942.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Menu } from 'antd';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport function HeaderMenu() {\r\n    return (\r\n        <Menu mode=\"horizontal\">\r\n            <Menu.Item key=\"profile\">\r\n                <NavLink to='/profile'>Profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"sign-in\">\r\n                <NavLink to='/sign-in'>Sign-in</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"forgot\">\r\n                <NavLink to='/packs'>Packs</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"set-new-pass\">\r\n                <NavLink to='/cards'>Cards</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype Props = {};\r\nexport const Profile = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Profile</h3>\r\n            </div>\r\n            <button >Logout</button>\r\n        </div>\r\n    );\r\n};\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: 'http://localhost:7542/1.0/'*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\ntype ResponseType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: string\r\n    publicCardPacksCount: number\r\n    __v: number\r\n    password: string\r\n    token: string\r\n    success: boolean\r\n};\r\n\r\nexport const authAPI = {\r\n    signIn(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    getAuth (token: string) {\r\n        return instance.post(`auth/me`, {token})\r\n            .then(res => res.data)\r\n    }\r\n};","import Cookie from 'universal-cookie'\r\n\r\nconst cookie = new Cookie();\r\n\r\nclass saveTokenInCookie {\r\n\r\n    get (key: string) {\r\n        return cookie.get(key)\r\n    }\r\n\r\n    set (key: string, value: string) {\r\n        cookie.set(key, value)\r\n    }\r\n\r\n    remove(key: string) {\r\n        cookie.remove(key)\r\n    }\r\n}\r\n\r\nexport default new saveTokenInCookie();","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\nimport {authAPI} from \"../api/signInApi\";\r\n\r\nlet initialState = {\r\n    _id: null as (string | null),\r\n    email: null as (null | string),\r\n    name: null as (null | string),\r\n    isAdmin: null as (null | boolean),\r\n    publicCardPacksCount: null as (null | number),\r\n    isAuth: false\r\n}\r\n\r\n//Reducer\r\nexport const AuthReducer = (state: InitialState = initialState, action: ActionsType): InitialState => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_AUTH_DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nconst actions = {\r\n    setAuthData: (_id: null | string, email: null | string, name: null | string,\r\n                  isAdmin: null | boolean, publicCardPacksCount: null | number, isAuth: boolean) => ({\r\n        type: \"AUTH/SET_AUTH_DATA\",\r\n        payload: {\r\n            _id, email, name, isAdmin, publicCardPacksCount, isAuth\r\n        }\r\n    } as const)\r\n}\r\n//Thunk\r\nexport const getAuthData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const token = saveTokenInCookie.get('auth_token');\r\n        let data = await authAPI.getAuth(token)\r\n        saveTokenInCookie.set('auth_token', data.token);\r\n        let {_id, email, name, isAdmin, publicCardPacksCount} = data;\r\n        dispatch(actions.setAuthData(_id, email, name, isAdmin, publicCardPacksCount,true))\r\n    } catch (e) {\r\n        console.log(e.message)\r\n\r\n    }\r\n}\r\n\r\n//Types\r\ntype InitialState = typeof initialState\r\ntype ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionsType>","import {authAPI} from '../api/signInApi';\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\nimport {getAuthData} from \"./auth-reducer\";\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, ActionType>\r\ntype ActionType = InferActionTypes<typeof actions>\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    _id: null as (null | string),\r\n    email: null as (null | string),\r\n    success: false,\r\n    isFetching: false,\r\n    errorMessage: ''\r\n};\r\n\r\n\r\n//reducer\r\nconst signInReducer = (state: initialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"SIGNIN/SET_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case \"SIGNIN/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SIGNIN/SET_MESSAGE_ERROR\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n//action\r\nexport const actions = {\r\n    setAuthUserDataSuccess: (_id: string, email: string, success: boolean) => ({type: \"SIGNIN/SET_USER_DATA\", payload: {_id, email, success}} as const),\r\n    setAuthUserDataError: ( errorMessage: string) => ({type: \"SIGNIN/SET_MESSAGE_ERROR\", errorMessage} as const ),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"SIGNIN/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//thunk to login\r\nexport const signIn = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setAuthUserDataError(\"\"));\r\n        let data = await authAPI.signIn(email, password, rememberMe);\r\n        saveTokenInCookie.set('auth_token', data.token);\r\n        dispatch(actions.setAuthUserDataSuccess(data._id, data.email, data.success));\r\n        dispatch(getAuthData());\r\n    } catch (e) {\r\n        dispatch(actions.setAuthUserDataError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(actions.toggleIsFetching(false));\r\n};\r\n\r\nexport default signInReducer;\r\n","import * as yup from \"yup\";\r\n\r\nexport const schemaSignInForm = yup.object().shape({\r\n    email: yup.string().required().min(2),\r\n    password: yup.string().required().min(8),\r\n});\r\n\r\nexport const schemaRegisterForm = yup.object().shape({\r\n    email: yup.string().email().required().min(7),\r\n    password: yup.string().required().min(8),\r\n    passwordConfirmation: yup.string().required().label('Confirm password')\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});\r\nexport const schemaForgotPage = yup.object().shape({\r\n    email: yup.string().email().required(),\r\n});\r\nexport const schemaSetNewPassForm = yup.object().shape({\r\n    password: yup.string().required().min(8),\r\n    passwordConfirmation: yup.string().required()\r\n        .test('passwordConfirmation', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        })\r\n});","import React from 'react';\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {Alert, Button, Input} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../../redux/sign-in-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport style from './SignIn.module.css'\r\nimport {schemaSignInForm} from \"../../utils/validators/validators\";\r\n\r\n//react-hook-form\r\ntype  LoginData = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean\r\n}\r\n\r\n//using hook\r\nexport const SignIn = () => {\r\n    const dispatch = useDispatch();\r\n    const {register, handleSubmit, errors, control, reset} = useForm<LoginData>({\r\n        resolver: yupResolver(schemaSignInForm)\r\n    });\r\n\r\n//dispatch thunk\r\n    const onSubmit = (data: LoginData) => {\r\n        let {email, password, rememberMe} = data;\r\n        dispatch(signIn(email, password, rememberMe));\r\n    };\r\n\r\n    //checking logged user or not\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n    const {isFetching, errorMessage} = useSelector((state: AppStateType) => state.singInReducer);\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={`/profile`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.signInPage}>\r\n\r\n            <div>\r\n                <h3>SignIn</h3>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.signInPage__form}>\r\n                <div>\r\n                    <Controller\r\n                        as={Input}\r\n                        name=\"email\"\r\n                        control={control}\r\n                        placeholder=\"Email\"\r\n                    />\r\n                    {errors.email && <Alert message=\"Login is required\" type=\"error\" showIcon/>}\r\n                </div>\r\n                <div>\r\n                    <Controller\r\n                        as={Input.Password}\r\n                        name=\"password\"\r\n                        control={control}\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    {errors.password && <Alert message=\"Password is required\" type=\"error\" showIcon/>}\r\n                </div>\r\n\r\n                <Link to='/forgot'>Forgot your password?</Link>\r\n                <div>\r\n                    <input type='checkbox' name='rememberMe' ref={register}/>\r\n                    {` Remember me`}\r\n                </div>\r\n                <Button onClick={ () => reset() } loading={isFetching} htmlType='submit' type='primary'>Sign In</Button>\r\n            </form>\r\n            <span>or</span>\r\n            <Link to='/register'>Registration</Link>\r\n        </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\ntype addedUserResponseType = {\r\n    created: string,\r\n    email: string,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    updated: string,\r\n    verified: boolean,\r\n    __v: number,\r\n    _id: string,\r\n}\r\n\r\ntype ResponseType = {\r\n    addedUser: addedUserResponseType,\r\n    success: boolean\r\n}\r\n\r\nexport const registerAPI = {\r\n    register: (email: string, password: string) => instance.post<ResponseType>(`auth/register`, {email: email, password: password})\r\n        .then(res => res.data)\r\n};","import {registerAPI} from \"../api/registerApi\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER_DATA_SUCCESS = 'authorization-module-project/registerReducer/SET_USER_DATA_SUCCESS';\r\n\r\ntype addedUser = {\r\n    created: string | null,\r\n    email: string | null,\r\n    isAdmin: boolean,\r\n    name: string | null,\r\n    publicCardPacksCount: number | null,\r\n    rememberMe: boolean,\r\n    updated: string | null,\r\n    verified: boolean,\r\n    __v: number | null,\r\n    _id: string | null,\r\n}\r\n\r\ntype initialState = {\r\n    addedUser: addedUser,\r\n    success: boolean\r\n};\r\n\r\nconst initialState: initialState = {\r\n    addedUser: {\r\n        created: null,\r\n        email: null,\r\n        isAdmin: false,\r\n        name: null,\r\n        publicCardPacksCount: null,\r\n        rememberMe: false,\r\n        updated: null,\r\n        verified: false,\r\n        __v: null,\r\n        _id: null,\r\n    },\r\n    success: false\r\n};\r\n\r\nexport const registerReducer = (state: initialState = initialState, action: registerActionTypes) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addedUser: {...action.payload.addedUser},\r\n                success: action.payload.success\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Actions\r\ntype InferRegisterActionTypes<T> = T extends {[key: string]: infer U} ? U : never;\r\ntype registerActionTypes = ReturnType<InferRegisterActionTypes<typeof actions>>\r\n\r\nconst actions = {\r\n    registerUserDataSuccess : (userData: initialState) => ({type: SET_USER_DATA_SUCCESS, payload: {...userData}} as const),\r\n}\r\n\r\n//Thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, {}, registerActionTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, {}, registerActionTypes>\r\n\r\nexport const userRegisteration = (email: string, password: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const data = await registerAPI.register(email, password);\r\n        dispatch(actions.registerUserDataSuccess(data))\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {userRegisteration} from \"../../redux/register-reducer\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {useCallback} from \"react\";\r\nimport {Button, Input} from \"antd\";\r\nimport style from './Register.module.css'\r\nimport {schemaRegisterForm} from \"../../utils/validators/validators\";\r\n\r\ntype IFormInputs = {\r\n    email: string,\r\n    password: string,\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const Register = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.register.success);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<IFormInputs>({\r\n        resolver: yupResolver(schemaRegisterForm)\r\n    });\r\n\r\n    const userRegistrationCallback = useCallback((email: string, password: string) =>\r\n            dispatch(userRegisteration(email, password)),\r\n        [dispatch]\r\n    );\r\n\r\n    const onSubmit = (data: IFormInputs) => {\r\n        userRegistrationCallback(data.email, data.password);\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/sign-in\"/>\r\n    }\r\n    return (\r\n        <div className={style.registerPage}>\r\n            <div>\r\n                <h3>Registration</h3>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.registerPage__form}>\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n                <p>{errors.email?.message}</p>\r\n                <Controller\r\n                    as={Input.Password}\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Password\"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n\r\n                <Controller\r\n                    as={Input.Password}\r\n                    type='password'\r\n                    name=\"passwordConfirmation\"\r\n                    control={control}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n                <p>{errors.passwordConfirmation?.message}</p>\r\n                <Button onClick={ () => reset() } htmlType='submit' type=\"primary\">Register</Button>\r\n            </form>\r\n            <Link to='/sign-in'>Sign In</Link>\r\n        </div>\r\n    );\r\n};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"http://localhost:7542/1.0/\",\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\n\r\nexport const forgotPageAPI = {\r\n    forgot (email: string, html1 = \"<a href='http://localhost:3000/authorization-module#/set-new-password'\", html2 = \">reset-password-link</a>\") {\r\n        return instance.post(\"/auth/forgot\", {email, html1, html2})\r\n            .then(response => response.data)\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {forgotPageAPI} from \"../api/forgot-page\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\n\r\n//State\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    isFetching: false,\r\n}\r\n\r\n//Reducer\r\nexport const forgotReducer = (state: InitialState = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                success: action.success,\r\n            }\r\n        }\r\n        case 'FORGOTPAGE/CHANGE_PASSWORD_ERROR': {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            }\r\n        }\r\n        case \"FORGOTPAGE/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action\r\nconst action = {\r\n    setChangePasswordSuccess: (success: boolean) => ({\r\n        type: 'FORGOTPAGE/CHANGE_PASSWORD_SUCCESS',\r\n        success\r\n    } as const ),\r\n    setChangePasswordError: (errorMessage: string) => ({\r\n        type: 'FORGOTPAGE/CHANGE_PASSWORD_ERROR',\r\n        errorMessage\r\n    } as const ),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"FORGOTPAGE/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//Thunk\r\nexport const changePassword = (email: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(action.toggleIsFetching(true));\r\n        dispatch(action.setChangePasswordError(\"\"));\r\n        let data = await forgotPageAPI.forgot(email);\r\n        let result = data.html.match(/(.*)set-new-password'(.*?)>(.*)/);\r\n        const resetPasswordToken = result[2];\r\n        saveTokenInCookie.set('resetPasswordToken', resetPasswordToken);\r\n        dispatch(action.setChangePasswordSuccess(data.success))\r\n    } catch (e) {\r\n        dispatch(action.setChangePasswordError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(action.toggleIsFetching(false))\r\n}\r\n\r\n//Types\r\ntype ActionTypes = InferActionTypes <typeof action>\r\ntype InitialState = typeof initialState\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionTypes>\r\n","import React from \"react\";\r\nimport {Result} from \"antd\";\r\n\r\n\r\nexport function Success() {\r\n    return (\r\n        <Result\r\n            status=\"success\"\r\n            title= 'Check your email'\r\n            subTitle=\"We've sent an email to ... . Click the link in the email to reset your password\r\n            If you don't see the email, check other places it might be, like your junk, social, spam, or other folders.\"\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {Button, Input, Alert} from 'antd';\r\nimport style from './Forgot.module.css'\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {changePassword} from \"../../redux/forgot-reducer\";\r\nimport {schemaForgotPage} from '../../utils/validators/validators';\r\nimport {Success} from '../Success/Success';\r\n\r\ntype InputEmailType = {\r\n    email: string\r\n}\r\n\r\nexport const Forgot: React.FC = () => {\r\n    const {handleSubmit, errors, control, reset} = useForm<InputEmailType>({resolver: yupResolver(schemaForgotPage)});\r\n    const onSubmit = (data: InputEmailType) => {\r\n        resetPassword(data.email);\r\n\r\n\r\n    };\r\n\r\n    const {errorMessage, isFetching, success} = useSelector((state: AppStateType) => state.forgotPage);\r\n    const dispatch = useDispatch();\r\n    const resetPassword = useCallback((data) => dispatch(changePassword(data)), [dispatch])\r\n    console.log(\"Render Forgot\");\r\n\r\n    if (success) {\r\n        return <Success />\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgotPage}>\r\n            {errorMessage &&\r\n            <Alert message={errorMessage} type=\"warning\" showIcon/>\r\n            }\r\n            <h3>Forgot password?</h3>\r\n            <span>Please enter <b>email</b> that you used to sign in</span>\r\n            <form className={style.forgotForm} onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={style.error}>\r\n                    {errors.email\r\n                        ? <Alert message={errors.email?.message} type=\"error\" showIcon/>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <Controller\r\n                    as={Input}\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Email\"\r\n                />\r\n                <Button onClick={() => reset()} loading={isFetching} htmlType=\"submit\" type='primary'>Send email</Button>\r\n            </form>\r\n            <Link to={'/sign-in'}>Sign In</Link>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    /*baseURL: \"http://localhost:7542/1.0/\",*/\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\"\r\n});\r\n\r\nexport const resetPasswordApi = {\r\n    resetPassword (resetPasswordToken: string, password: string) {\r\n        return instance.post('/auth/set-new-password', {resetPasswordToken, password})\r\n            .then(res=> res.data)\r\n    }\r\n}","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {resetPasswordApi} from \"../api/resetPasswordApi\";\r\nimport saveTokenInCookie from \"../utils/CookieToken/SaveTokenCookie\"\r\n\r\nlet initialState = {\r\n    success: false,\r\n    errorMessage: \"\",\r\n    isFetching: false\r\n}\r\n\r\n//Reducer\r\nexport const SetNewPassReducer = (state: InitialState = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"RESET/SET_NEW_PASS_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                success: action.success\r\n            }\r\n        }\r\n        case \"RESET/SET_NEW_PASS_ERROR\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.message\r\n            }\r\n        }\r\n        case \"RESET/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nconst actions = {\r\n    setNewPassSuccess: (success: boolean) => ({type: \"RESET/SET_NEW_PASS_SUCCESS\", success} as const),\r\n    setNewPassError: (message: string) => ({type: \"RESET/SET_NEW_PASS_ERROR\", message} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"RESET/TOGGLE_IS_FETCHING\", isFetching} as const )\r\n}\r\n\r\n//Thunk\r\nexport const resetPassword = (password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        const resetPasswordToken = saveTokenInCookie.get('resetPasswordToken');\r\n        let data = await resetPasswordApi.resetPassword(resetPasswordToken, password);\r\n        dispatch(actions.setNewPassSuccess(data))\r\n    } catch (e) {\r\n        dispatch(actions.setNewPassError(e.response.data.error));\r\n        console.log(e.message)\r\n    }\r\n    dispatch(actions.toggleIsFetching(false))\r\n}\r\n\r\n\r\n//Types\r\ntype InitialState = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>","import React, {useCallback} from 'react';\r\nimport style from \"./SetNewPass.module.css\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {Button, Input} from \"antd\";\r\nimport {yupResolver} from \"@hookform/resolvers\";\r\nimport {schemaSetNewPassForm} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {resetPassword} from \"../../redux/set-new-pass-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype SetNewPassType = {\r\n    password: string\r\n    passwordConfirmation: string\r\n}\r\n\r\nexport const SetNewPass = () => {\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<SetNewPassType>({\r\n        resolver: yupResolver(schemaSetNewPassForm)\r\n    });\r\n    const onSubmit = (data: SetNewPassType) => {\r\n        sendNewPass(data.password);\r\n    };\r\n    const {success, isFetching} = useSelector((state: AppStateType) => state.restPass);\r\n\r\n    const dispatch = useDispatch();\r\n    const sendNewPass = useCallback(\r\n        (data) => dispatch(resetPassword(data)),\r\n        [dispatch]\r\n    )\r\n\r\n    if (success) {\r\n        return <Redirect to='/sign-in'/>\r\n    }\r\n    return (\r\n        <div className={style.setNewPassPage}>\r\n            <div className={style.setNewPassPage__info}>\r\n                <h3>Choose a New Password</h3>\r\n                <span>Create a new password that is at least 8 characters long</span>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)} className={style.setNewPassPage__form}>\r\n                <Controller\r\n                    as={Input.Password}\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Password\"\r\n                />\r\n                <p>{errors.password?.message}</p>\r\n\r\n                <Controller\r\n                    as={Input.Password}\r\n                    type='password'\r\n                    name=\"passwordConfirmation\"\r\n                    control={control}\r\n                    placeholder=\"Confirm password\"\r\n                />\r\n                <p>{errors.passwordConfirmation?.message}</p>\r\n                <Button onClick={ () => reset() } loading={isFetching} htmlType='submit' type=\"primary\">Continue</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HeaderMenu} from \"./components/Menu/Menu\";\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {SignIn} from \"./components/Sign-In/SignIn\";\r\nimport {Register} from \"./components/Register/Register\";\r\nimport {Forgot} from \"./components/Forgot/Forgot\";\r\nimport {SetNewPass} from \"./components/Set-New-Pass/SetNewPass\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getAuthData} from \"./redux/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getAuthData())\r\n    })\r\n    return (\r\n\r\n        <div className='main'>\r\n            <HeaderMenu/>\r\n            <Switch>\r\n                <Route path='/profile' render={() => <Profile />}/>\r\n                <Route path='/sign-in' render={() => <SignIn/>}/>\r\n                <Route path='/register' render={() => <Register/>}/>\r\n                <Route path='/forgot' render={() => <Forgot/>}/>\r\n                <Route path='/set-new-password' render={() => <SetNewPass/>}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {forgotReducer} from \"./forgot-reducer\";\r\nimport { registerReducer } from \"./register-reducer\";\r\nimport signInReducer from \"./sign-in-reducer\";\r\nimport {AuthReducer} from \"./auth-reducer\";\r\nimport {SetNewPassReducer} from \"./set-new-pass-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    forgotPage: forgotReducer,\r\n    register: registerReducer,\r\n    auth: AuthReducer,\r\n    restPass: SetNewPassReducer,\r\n    singInReducer: signInReducer\r\n});\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPage\":\"Forgot_forgotPage__neKLE\",\"error\":\"Forgot_error__BLT2U\",\"forgotForm\":\"Forgot_forgotForm__UfYTJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setNewPassPage\":\"SetNewPass_setNewPassPage__3smxh\",\"setNewPassPage__info\":\"SetNewPass_setNewPassPage__info__DRlit\",\"setNewPassPage__form\":\"SetNewPass_setNewPassPage__form__21O7x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signInPage\":\"SignIn_signInPage__WFi5q\",\"signInPage__form\":\"SignIn_signInPage__form__1tCuA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerPage\":\"Register_registerPage__5npDg\",\"registerPage__form\":\"Register_registerPage__form__2krKA\"};"],"sourceRoot":""}